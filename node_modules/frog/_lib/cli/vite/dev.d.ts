import type { Plugin as VitePlugin } from 'vite';
export type DevServerOptions = {
    entry?: string;
    export?: string;
    injectClientScript?: boolean;
    exclude?: RegExp[];
    ignoreWatching?: (string | RegExp)[];
    env?: Env | EnvFunc;
    plugins?: Plugin[];
    adapter?: Adapter | Promise<Adapter> | (() => Adapter | Promise<Adapter>);
};
export declare const defaultOptions: {
    entry: string;
    export: string;
    injectClientScript: true;
    exclude: RegExp[];
    ignoreWatching: RegExp[];
    plugins: never[];
};
export declare function devServer(options?: DevServerOptions): VitePlugin;
type Env = Record<string, unknown> | Promise<Record<string, unknown>>;
type EnvFunc = () => Env | Promise<Env>;
interface Plugin {
    env?: Env | EnvFunc;
    onServerClose?: () => void | Promise<void>;
}
interface Adapter {
    /**
     * Environment variables to be injected into the worker
     */
    env?: Env;
    /**
     * Function called when the vite dev server is closed
     */
    onServerClose?: () => Promise<void>;
    /**
     * Implementation of waitUntil and passThroughOnException
     */
    executionContext?: {
        waitUntil(promise: Promise<unknown>): void;
        passThroughOnException(): void;
    };
}
export {};
//# sourceMappingURL=dev.d.ts.map