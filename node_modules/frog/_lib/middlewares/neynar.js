import { hexToBytes } from 'viem';
import { neynar as neynarHub, } from '../hubs/neynar.js';
import { Message } from '../protobufs/generated/message_pb.js';
import { messageToFrameData } from '../utils/verifyFrame.js';
export function neynar(parameters) {
    const { apiKey, features } = parameters;
    return async (c, next) => {
        const { trustedData } = (await c.req.json().catch(() => { })) || {};
        if (!trustedData)
            return await next();
        // Note: We are not verifying here as we verify downstream (internal Frog handler).
        const body = hexToBytes(`0x${trustedData.messageBytes}`);
        const message = Message.fromBinary(body);
        const frameData = messageToFrameData(message);
        const { castId: { fid: castFid, hash }, fid, } = frameData;
        const [castResponse, usersResponse] = await Promise.all([
            features.includes('cast')
                ? getCast({
                    apiKey,
                    hash,
                })
                : Promise.resolve(undefined),
            features.includes('interactor')
                ? getUsers({ apiKey, castFid, fids: [fid] })
                : Promise.resolve(undefined),
        ]);
        if (castResponse)
            c.set('cast', castResponse.cast);
        if (usersResponse) {
            const [user] = usersResponse.users;
            if (user)
                c.set('interactor', user);
        }
        await next();
    };
}
///////////////////////////////////////////////////////////////////////////
// Utilities
const neynarApiUrl = 'https://api.neynar.com';
async function getCast({ apiKey, hash, }) {
    const response = await fetch(`${neynarApiUrl}/v2/farcaster/cast?type=hash&identifier=${hash}`, {
        headers: {
            api_key: apiKey,
            'Content-Type': 'application/json',
        },
    }).then((res) => res.json());
    return camelCaseKeys(response);
}
async function getUsers({ apiKey, castFid, fids, }) {
    const response = await fetch(`${neynarApiUrl}/v2/farcaster/user/bulk?fids=${fids.join(',')}&viewer_fid=${castFid}`, {
        headers: {
            api_key: apiKey,
            'Content-Type': 'application/json',
        },
    }).then((res) => res.json());
    return camelCaseKeys(response);
}
function camelCaseKeys(response) {
    if (!response)
        return response;
    if (typeof response !== 'object')
        return response;
    if (Array.isArray(response))
        return response.map(camelCaseKeys);
    return Object.fromEntries(Object.entries(response).map(([key, value]) => [
        key.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase()),
        camelCaseKeys(value),
    ]));
}
export function createNeynar(parameters) {
    const { apiKey } = parameters;
    return {
        hub(parameters = {}) {
            return neynarHub({ ...parameters, apiKey });
        },
        middleware(parameters) {
            return neynar({ ...parameters, apiKey });
        },
    };
}
//# sourceMappingURL=neynar.js.map