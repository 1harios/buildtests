import { deserializeJson } from './deserializeJson.js';
import { fromQuery } from './fromQuery.js';
import { getRequestUrl } from './getRequestUrl.js';
import * as jws from './jws.js';
import { verifyFrame } from './verifyFrame.js';
export async function requestBodyToContext(c, { hub, secret, verify = true }) {
    const { trustedData, untrustedData } = (await c.req.json().catch(() => { })) || {};
    const { initialPath, previousState, previousButtonValues } = await (async () => {
        if (untrustedData?.state) {
            const state = deserializeJson(untrustedData.state);
            if (secret && state.previousState)
                state.previousState = JSON.parse(await jws.verify(state.previousState, secret));
            return state;
        }
        if (c.req.query())
            return fromQuery(c.req.query());
        return {};
    })();
    const url = getRequestUrl(c.req);
    const trustedFrameData = await (async () => {
        if (verify === false)
            return null;
        if (!trustedData)
            return null;
        if (!hub)
            return null;
        try {
            const { frameData } = await verifyFrame({
                hub,
                frameUrl: untrustedData.url,
                trustedData,
                url: url.href,
            });
            return { ...frameData, state: frameData.state || untrustedData.state };
        }
        catch (err) {
            if (verify === 'silent')
                return null;
            throw err;
        }
    })();
    return {
        env: c.env,
        initialPath: initialPath ? initialPath : url.pathname,
        previousState,
        previousButtonValues,
        frameData: trustedFrameData || untrustedData,
        req: c.req,
        status: c.req.method === 'POST' ? 'response' : 'initial',
        url: url.href,
        var: c.var,
        verified: Boolean(trustedFrameData),
    };
}
//# sourceMappingURL=requestBodyToContext.js.map