import { getIntentState } from './getIntentState.js';
import { parsePath } from './parsePath.js';
export function getFrameContext(parameters) {
    const { context, origin } = parameters;
    const { env, frameData, initialPath, previousButtonValues, req, verified } = context || {};
    const { buttonValue, inputText, redirect, reset } = getIntentState({
        buttonValues: previousButtonValues || [],
        frameData,
    });
    const status = (() => {
        if (redirect)
            return 'redirect';
        if (reset)
            return 'initial';
        return context.status || 'initial';
    })();
    // If the user has clicked a reset button, we want to set the URL back to the
    // initial URL.
    const url = parsePath(reset ? `${origin}${initialPath}` : context.url);
    let previousState = (() => {
        if (context.status === 'initial')
            return parameters.initialState;
        return context?.previousState || parameters.initialState;
    })();
    function deriveState(derive) {
        if (status !== 'response')
            return previousState;
        if (!derive)
            return previousState;
        const clone = structuredClone(previousState);
        if (derive[Symbol.toStringTag] === 'AsyncFunction')
            return derive(clone).then(() => {
                previousState = clone;
                return previousState;
            });
        derive(clone);
        previousState = clone;
        return previousState;
    }
    return {
        context: {
            buttonIndex: frameData?.buttonIndex,
            buttonValue,
            cycle: 'main',
            deriveState: deriveState,
            env,
            error: (data) => ({
                error: data,
                format: 'frame',
                status: 'error',
            }),
            frameData,
            initialPath,
            inputText,
            previousButtonValues,
            previousState: previousState,
            req,
            res: (data) => ({ data, format: 'frame', status: 'success' }),
            status,
            transactionId: frameData?.transactionId,
            url,
            var: context.var,
            verified,
        },
        getState: () => previousState,
    };
}
//# sourceMappingURL=getFrameContext.js.map