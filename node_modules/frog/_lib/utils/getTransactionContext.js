import { AbiFunctionNotFoundError, encodeFunctionData, getAbiItem, } from 'viem';
import { getIntentState } from './getIntentState.js';
export function getTransactionContext(parameters) {
    const { context } = parameters;
    const { env, frameData, initialPath, previousButtonValues, previousState, req, status, verified, url, } = context || {};
    const { buttonValue, inputText } = getIntentState({
        buttonValues: previousButtonValues || [],
        frameData,
    });
    return {
        context: {
            address: frameData?.address,
            buttonIndex: frameData?.buttonIndex,
            buttonValue,
            contract(parameters) {
                const { abi, chainId, functionName, gas, to, args, attribution, value, } = parameters;
                const abiItem = getAbiItem({
                    abi: abi,
                    name: functionName,
                    args,
                });
                if (!abiItem)
                    throw new AbiFunctionNotFoundError(functionName);
                const abiErrorItems = abi.filter((item) => item.type === 'error');
                return this.send({
                    abi: [abiItem, ...abiErrorItems],
                    attribution,
                    chainId,
                    data: encodeFunctionData({
                        abi,
                        args,
                        functionName,
                    }),
                    gas,
                    to,
                    value,
                });
            },
            env,
            error: (data) => ({
                error: data,
                format: 'transaction',
                status: 'error',
            }),
            frameData,
            initialPath,
            inputText,
            previousButtonValues,
            previousState,
            req,
            res(parameters) {
                const { attribution, chainId, method, params } = parameters;
                const { abi, data, gas, to, value } = params;
                const response = {
                    attribution,
                    chainId,
                    method,
                    params: {
                        abi,
                        data,
                        to,
                    },
                };
                if (gas)
                    response.params.gas = gas.toString();
                if (value)
                    response.params.value = value.toString();
                return { data: response, format: 'transaction', status: 'success' };
            },
            send(parameters) {
                return this.res({
                    attribution: parameters.attribution ?? false,
                    chainId: parameters.chainId,
                    method: 'eth_sendTransaction',
                    params: parameters,
                });
            },
            status,
            var: context.var,
            verified,
            url,
        },
    };
}
//# sourceMappingURL=getTransactionContext.js.map