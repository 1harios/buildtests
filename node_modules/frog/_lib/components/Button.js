import { jsx as _jsx } from "frog/jsx/jsx-runtime";
export const buttonPrefix = {
    addCastAction: '_a',
    link: '_l',
    mint: '_m',
    redirect: '_r',
    reset: '_c',
    transaction: '_t',
    signature: '_s',
};
ButtonRoot.__type = 'button';
export function ButtonRoot({ action, children, 
// @ts-ignore - private
index = 1, value, }) {
    return [
        _jsx("meta", { property: `fc:frame:button:${index}`, content: normalizeChildren(children), ...(value ? { 'data-value': value } : {}) }),
        _jsx("meta", { property: `fc:frame:button:${index}:action`, content: "post" }),
        action && (_jsx("meta", { property: `fc:frame:button:${index}:target`, content: action })),
    ];
}
ButtonAddCastAction.__type = 'button';
export function ButtonAddCastAction({ action, children, 
// @ts-ignore - private
index = 1, }) {
    return [
        _jsx("meta", { property: `fc:frame:button:${index}`, content: normalizeChildren(children), "data-value": buttonPrefix.addCastAction }),
        _jsx("meta", { property: `fc:frame:button:${index}:action`, content: "link" }),
        _jsx("meta", { property: `fc:frame:button:${index}:target`, content: `https://warpcast.com/~/add-cast-action?url=${action}` }),
    ];
}
ButtonLink.__type = 'button';
export function ButtonLink({ children, 
// @ts-ignore - private
index = 1, href, }) {
    return [
        _jsx("meta", { property: `fc:frame:button:${index}`, content: normalizeChildren(children), "data-value": buttonPrefix.link }),
        _jsx("meta", { property: `fc:frame:button:${index}:action`, content: "link" }),
        _jsx("meta", { property: `fc:frame:button:${index}:target`, content: href }),
    ];
}
ButtonMint.__type = 'button';
export function ButtonMint({ children, 
// @ts-ignore - private
index = 1, target, }) {
    return [
        _jsx("meta", { property: `fc:frame:button:${index}`, content: normalizeChildren(children), "data-value": buttonPrefix.mint }),
        _jsx("meta", { property: `fc:frame:button:${index}:action`, content: "mint" }),
        _jsx("meta", { property: `fc:frame:button:${index}:target`, content: target }),
    ];
}
ButtonRedirect.__type = 'button';
export function ButtonRedirect({ children, 
// @ts-ignore - private
index = 1, location, }) {
    return [
        _jsx("meta", { property: `fc:frame:button:${index}`, content: normalizeChildren(children), "data-type": "redirect", "data-value": `${buttonPrefix.redirect}:${location}` }),
        _jsx("meta", { property: `fc:frame:button:${index}:action`, content: "post_redirect" }),
        // TODO: Add `target` prop so folks can `'post_redirect'` to a different frame
        // <meta property={`fc:frame:button:${index}:target`} content={target} />,
    ];
}
ButtonReset.__type = 'button';
export function ButtonReset({ children, 
// @ts-ignore - private
index = 1, }) {
    return (_jsx("meta", { property: `fc:frame:button:${index}`, content: normalizeChildren(children), "data-value": buttonPrefix.reset, "data-type": "reset" }));
}
ButtonTransaction.__type = 'button';
export function ButtonTransaction({ action, children, 
// @ts-ignore - private
index = 1, target, }) {
    return [
        _jsx("meta", { property: `fc:frame:button:${index}`, content: normalizeChildren(children), "data-value": buttonPrefix.transaction }),
        _jsx("meta", { property: `fc:frame:button:${index}:action`, content: "tx" }),
        _jsx("meta", { property: `fc:frame:button:${index}:target`, content: target }),
        action && (_jsx("meta", { property: `fc:frame:button:${index}:post_url`, content: action })),
    ];
}
ButtonSignature.__type = 'button';
export function ButtonSignature({ action, children, 
// @ts-ignore - private
index = 1, target, }) {
    return [
        _jsx("meta", { property: `fc:frame:button:${index}`, content: normalizeChildren(children), "data-value": buttonPrefix.signature }),
        _jsx("meta", { property: `fc:frame:button:${index}:action`, content: "tx" }),
        _jsx("meta", { property: `fc:frame:button:${index}:target`, content: target }),
        action && (_jsx("meta", { property: `fc:frame:button:${index}:post_url`, content: action })),
    ];
}
export const Button = Object.assign(ButtonRoot, {
    AddCastAction: ButtonAddCastAction,
    Link: ButtonLink,
    Mint: ButtonMint,
    Redirect: ButtonRedirect,
    Reset: ButtonReset,
    Transaction: ButtonTransaction,
    Signature: ButtonSignature,
});
function normalizeChildren(children) {
    return Array.isArray(children) ? children.join('') : children;
}
//# sourceMappingURL=Button.js.map