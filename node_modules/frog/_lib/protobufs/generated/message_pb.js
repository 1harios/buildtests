// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file message.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck
import { Message as Message$1, proto3, protoInt64 } from "@bufbuild/protobuf";
import { UserNameProof } from "./username_proof_pb.js";
/**
 * * Type of hashing scheme used to produce a digest of MessageData
 *
 * @generated from enum HashScheme
 */
export var HashScheme;
(function (HashScheme) {
    /**
     * @generated from enum value: HASH_SCHEME_NONE = 0;
     */
    HashScheme[HashScheme["NONE"] = 0] = "NONE";
    /**
     * Default scheme for hashing MessageData
     *
     * @generated from enum value: HASH_SCHEME_BLAKE3 = 1;
     */
    HashScheme[HashScheme["BLAKE3"] = 1] = "BLAKE3";
})(HashScheme || (HashScheme = {}));
// Retrieve enum metadata with: proto3.getEnumType(HashScheme)
proto3.util.setEnumType(HashScheme, "HashScheme", [
    { no: 0, name: "HASH_SCHEME_NONE" },
    { no: 1, name: "HASH_SCHEME_BLAKE3" },
]);
/**
 * * Type of signature scheme used to sign the Message hash
 *
 * @generated from enum SignatureScheme
 */
export var SignatureScheme;
(function (SignatureScheme) {
    /**
     * @generated from enum value: SIGNATURE_SCHEME_NONE = 0;
     */
    SignatureScheme[SignatureScheme["NONE"] = 0] = "NONE";
    /**
     * Ed25519 signature (default)
     *
     * @generated from enum value: SIGNATURE_SCHEME_ED25519 = 1;
     */
    SignatureScheme[SignatureScheme["ED25519"] = 1] = "ED25519";
    /**
     * ECDSA signature using EIP-712 scheme
     *
     * @generated from enum value: SIGNATURE_SCHEME_EIP712 = 2;
     */
    SignatureScheme[SignatureScheme["EIP712"] = 2] = "EIP712";
})(SignatureScheme || (SignatureScheme = {}));
// Retrieve enum metadata with: proto3.getEnumType(SignatureScheme)
proto3.util.setEnumType(SignatureScheme, "SignatureScheme", [
    { no: 0, name: "SIGNATURE_SCHEME_NONE" },
    { no: 1, name: "SIGNATURE_SCHEME_ED25519" },
    { no: 2, name: "SIGNATURE_SCHEME_EIP712" },
]);
/**
 * * Type of the MessageBody
 *
 * @generated from enum MessageType
 */
export var MessageType;
(function (MessageType) {
    /**
     * @generated from enum value: MESSAGE_TYPE_NONE = 0;
     */
    MessageType[MessageType["NONE"] = 0] = "NONE";
    /**
     * Add a new Cast
     *
     * @generated from enum value: MESSAGE_TYPE_CAST_ADD = 1;
     */
    MessageType[MessageType["CAST_ADD"] = 1] = "CAST_ADD";
    /**
     * Remove an existing Cast
     *
     * @generated from enum value: MESSAGE_TYPE_CAST_REMOVE = 2;
     */
    MessageType[MessageType["CAST_REMOVE"] = 2] = "CAST_REMOVE";
    /**
     * Add a Reaction to a Cast
     *
     * @generated from enum value: MESSAGE_TYPE_REACTION_ADD = 3;
     */
    MessageType[MessageType["REACTION_ADD"] = 3] = "REACTION_ADD";
    /**
     * Remove a Reaction from a Cast
     *
     * @generated from enum value: MESSAGE_TYPE_REACTION_REMOVE = 4;
     */
    MessageType[MessageType["REACTION_REMOVE"] = 4] = "REACTION_REMOVE";
    /**
     * Add a new Link
     *
     * @generated from enum value: MESSAGE_TYPE_LINK_ADD = 5;
     */
    MessageType[MessageType["LINK_ADD"] = 5] = "LINK_ADD";
    /**
     * Remove an existing Link
     *
     * @generated from enum value: MESSAGE_TYPE_LINK_REMOVE = 6;
     */
    MessageType[MessageType["LINK_REMOVE"] = 6] = "LINK_REMOVE";
    /**
     * Add a Verification of an Ethereum Address
     *
     * @generated from enum value: MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS = 7;
     */
    MessageType[MessageType["VERIFICATION_ADD_ETH_ADDRESS"] = 7] = "VERIFICATION_ADD_ETH_ADDRESS";
    /**
     * Remove a Verification
     *
     * @generated from enum value: MESSAGE_TYPE_VERIFICATION_REMOVE = 8;
     */
    MessageType[MessageType["VERIFICATION_REMOVE"] = 8] = "VERIFICATION_REMOVE";
    /**
     *  Deprecated
     *  MESSAGE_TYPE_SIGNER_ADD = 9; // Add a new Ed25519 key pair that signs messages for a user
     *  MESSAGE_TYPE_SIGNER_REMOVE = 10; // Remove an Ed25519 key pair that signs messages for a user
     *
     * Add metadata about a user
     *
     * @generated from enum value: MESSAGE_TYPE_USER_DATA_ADD = 11;
     */
    MessageType[MessageType["USER_DATA_ADD"] = 11] = "USER_DATA_ADD";
    /**
     * Add or replace a username proof
     *
     * @generated from enum value: MESSAGE_TYPE_USERNAME_PROOF = 12;
     */
    MessageType[MessageType["USERNAME_PROOF"] = 12] = "USERNAME_PROOF";
    /**
     * A Farcaster Frame action
     *
     * @generated from enum value: MESSAGE_TYPE_FRAME_ACTION = 13;
     */
    MessageType[MessageType["FRAME_ACTION"] = 13] = "FRAME_ACTION";
})(MessageType || (MessageType = {}));
// Retrieve enum metadata with: proto3.getEnumType(MessageType)
proto3.util.setEnumType(MessageType, "MessageType", [
    { no: 0, name: "MESSAGE_TYPE_NONE" },
    { no: 1, name: "MESSAGE_TYPE_CAST_ADD" },
    { no: 2, name: "MESSAGE_TYPE_CAST_REMOVE" },
    { no: 3, name: "MESSAGE_TYPE_REACTION_ADD" },
    { no: 4, name: "MESSAGE_TYPE_REACTION_REMOVE" },
    { no: 5, name: "MESSAGE_TYPE_LINK_ADD" },
    { no: 6, name: "MESSAGE_TYPE_LINK_REMOVE" },
    { no: 7, name: "MESSAGE_TYPE_VERIFICATION_ADD_ETH_ADDRESS" },
    { no: 8, name: "MESSAGE_TYPE_VERIFICATION_REMOVE" },
    { no: 11, name: "MESSAGE_TYPE_USER_DATA_ADD" },
    { no: 12, name: "MESSAGE_TYPE_USERNAME_PROOF" },
    { no: 13, name: "MESSAGE_TYPE_FRAME_ACTION" },
]);
/**
 * * Farcaster network the message is intended for
 *
 * @generated from enum FarcasterNetwork
 */
export var FarcasterNetwork;
(function (FarcasterNetwork) {
    /**
     * @generated from enum value: FARCASTER_NETWORK_NONE = 0;
     */
    FarcasterNetwork[FarcasterNetwork["NONE"] = 0] = "NONE";
    /**
     * Public primary network
     *
     * @generated from enum value: FARCASTER_NETWORK_MAINNET = 1;
     */
    FarcasterNetwork[FarcasterNetwork["MAINNET"] = 1] = "MAINNET";
    /**
     * Public test network
     *
     * @generated from enum value: FARCASTER_NETWORK_TESTNET = 2;
     */
    FarcasterNetwork[FarcasterNetwork["TESTNET"] = 2] = "TESTNET";
    /**
     * Private test network
     *
     * @generated from enum value: FARCASTER_NETWORK_DEVNET = 3;
     */
    FarcasterNetwork[FarcasterNetwork["DEVNET"] = 3] = "DEVNET";
})(FarcasterNetwork || (FarcasterNetwork = {}));
// Retrieve enum metadata with: proto3.getEnumType(FarcasterNetwork)
proto3.util.setEnumType(FarcasterNetwork, "FarcasterNetwork", [
    { no: 0, name: "FARCASTER_NETWORK_NONE" },
    { no: 1, name: "FARCASTER_NETWORK_MAINNET" },
    { no: 2, name: "FARCASTER_NETWORK_TESTNET" },
    { no: 3, name: "FARCASTER_NETWORK_DEVNET" },
]);
/**
 * * Type of UserData
 *
 * @generated from enum UserDataType
 */
export var UserDataType;
(function (UserDataType) {
    /**
     * @generated from enum value: USER_DATA_TYPE_NONE = 0;
     */
    UserDataType[UserDataType["NONE"] = 0] = "NONE";
    /**
     * Profile Picture for the user
     *
     * @generated from enum value: USER_DATA_TYPE_PFP = 1;
     */
    UserDataType[UserDataType["PFP"] = 1] = "PFP";
    /**
     * Display Name for the user
     *
     * @generated from enum value: USER_DATA_TYPE_DISPLAY = 2;
     */
    UserDataType[UserDataType["DISPLAY"] = 2] = "DISPLAY";
    /**
     * Bio for the user
     *
     * @generated from enum value: USER_DATA_TYPE_BIO = 3;
     */
    UserDataType[UserDataType["BIO"] = 3] = "BIO";
    /**
     * URL of the user
     *
     * @generated from enum value: USER_DATA_TYPE_URL = 5;
     */
    UserDataType[UserDataType["URL"] = 5] = "URL";
    /**
     * Preferred Name for the user
     *
     * @generated from enum value: USER_DATA_TYPE_USERNAME = 6;
     */
    UserDataType[UserDataType["USERNAME"] = 6] = "USERNAME";
})(UserDataType || (UserDataType = {}));
// Retrieve enum metadata with: proto3.getEnumType(UserDataType)
proto3.util.setEnumType(UserDataType, "UserDataType", [
    { no: 0, name: "USER_DATA_TYPE_NONE" },
    { no: 1, name: "USER_DATA_TYPE_PFP" },
    { no: 2, name: "USER_DATA_TYPE_DISPLAY" },
    { no: 3, name: "USER_DATA_TYPE_BIO" },
    { no: 5, name: "USER_DATA_TYPE_URL" },
    { no: 6, name: "USER_DATA_TYPE_USERNAME" },
]);
/**
 * * Type of Reaction
 *
 * @generated from enum ReactionType
 */
export var ReactionType;
(function (ReactionType) {
    /**
     * @generated from enum value: REACTION_TYPE_NONE = 0;
     */
    ReactionType[ReactionType["NONE"] = 0] = "NONE";
    /**
     * Like the target cast
     *
     * @generated from enum value: REACTION_TYPE_LIKE = 1;
     */
    ReactionType[ReactionType["LIKE"] = 1] = "LIKE";
    /**
     * Share target cast to the user's audience
     *
     * @generated from enum value: REACTION_TYPE_RECAST = 2;
     */
    ReactionType[ReactionType["RECAST"] = 2] = "RECAST";
})(ReactionType || (ReactionType = {}));
// Retrieve enum metadata with: proto3.getEnumType(ReactionType)
proto3.util.setEnumType(ReactionType, "ReactionType", [
    { no: 0, name: "REACTION_TYPE_NONE" },
    { no: 1, name: "REACTION_TYPE_LIKE" },
    { no: 2, name: "REACTION_TYPE_RECAST" },
]);
/**
 * * Type of Protocol to disambiguate verification addresses
 *
 * @generated from enum Protocol
 */
export var Protocol;
(function (Protocol) {
    /**
     * @generated from enum value: PROTOCOL_ETHEREUM = 0;
     */
    Protocol[Protocol["ETHEREUM"] = 0] = "ETHEREUM";
    /**
     * @generated from enum value: PROTOCOL_SOLANA = 1;
     */
    Protocol[Protocol["SOLANA"] = 1] = "SOLANA";
})(Protocol || (Protocol = {}));
// Retrieve enum metadata with: proto3.getEnumType(Protocol)
proto3.util.setEnumType(Protocol, "Protocol", [
    { no: 0, name: "PROTOCOL_ETHEREUM" },
    { no: 1, name: "PROTOCOL_SOLANA" },
]);
/**
 * *
 * A Message is a delta operation on the Farcaster network. The message protobuf is an envelope
 * that wraps a MessageData object and contains a hash and signature which can verify its authenticity.
 *
 * @generated from message Message
 */
export class Message extends Message$1 {
    constructor(data) {
        super();
        /**
         * Contents of the message
         *
         * @generated from field: MessageData data = 1;
         */
        Object.defineProperty(this, "data", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Hash digest of data
         *
         * @generated from field: bytes hash = 2;
         */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * Hash scheme that produced the hash digest
         *
         * @generated from field: HashScheme hash_scheme = 3;
         */
        Object.defineProperty(this, "hashScheme", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: HashScheme.NONE
        });
        /**
         * Signature of the hash digest
         *
         * @generated from field: bytes signature = 4;
         */
        Object.defineProperty(this, "signature", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * Signature scheme that produced the signature
         *
         * @generated from field: SignatureScheme signature_scheme = 5;
         */
        Object.defineProperty(this, "signatureScheme", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: SignatureScheme.NONE
        });
        /**
         * Public key or address of the key pair that produced the signature
         *
         * @generated from field: bytes signer = 6;
         */
        Object.defineProperty(this, "signer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * MessageData serialized to bytes if using protobuf serialization other than ts-proto
         *
         * @generated from field: optional bytes data_bytes = 7;
         */
        Object.defineProperty(this, "dataBytes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Message().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Message().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Message().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Message, a, b);
    }
}
Object.defineProperty(Message, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(Message, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Message"
});
Object.defineProperty(Message, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "data", kind: "message", T: MessageData },
        { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 3, name: "hash_scheme", kind: "enum", T: proto3.getEnumType(HashScheme) },
        { no: 4, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "signature_scheme", kind: "enum", T: proto3.getEnumType(SignatureScheme) },
        { no: 6, name: "signer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 7, name: "data_bytes", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    ])
});
/**
 * *
 * A MessageData object contains properties common to all messages and wraps a body object which
 * contains properties specific to the MessageType.
 *
 * @generated from message MessageData
 */
export class MessageData extends Message$1 {
    constructor(data) {
        super();
        /**
         * Type of message contained in the body
         *
         * @generated from field: MessageType type = 1;
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: MessageType.NONE
        });
        /**
         * Farcaster ID of the user producing the message
         *
         * @generated from field: uint64 fid = 2;
         */
        Object.defineProperty(this, "fid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * Farcaster epoch timestamp in seconds
         *
         * @generated from field: uint32 timestamp = 3;
         */
        Object.defineProperty(this, "timestamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        /**
         * Farcaster network the message is intended for
         *
         * @generated from field: FarcasterNetwork network = 4;
         */
        Object.defineProperty(this, "network", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: FarcasterNetwork.NONE
        });
        /**
         * @generated from oneof MessageData.body
         */
        Object.defineProperty(this, "body", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { case: undefined }
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new MessageData().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new MessageData().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new MessageData().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(MessageData, a, b);
    }
}
Object.defineProperty(MessageData, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(MessageData, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "MessageData"
});
Object.defineProperty(MessageData, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(MessageType) },
        { no: 2, name: "fid", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 3, name: "timestamp", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
        { no: 4, name: "network", kind: "enum", T: proto3.getEnumType(FarcasterNetwork) },
        { no: 5, name: "cast_add_body", kind: "message", T: CastAddBody, oneof: "body" },
        { no: 6, name: "cast_remove_body", kind: "message", T: CastRemoveBody, oneof: "body" },
        { no: 7, name: "reaction_body", kind: "message", T: ReactionBody, oneof: "body" },
        { no: 9, name: "verification_add_address_body", kind: "message", T: VerificationAddAddressBody, oneof: "body" },
        { no: 10, name: "verification_remove_body", kind: "message", T: VerificationRemoveBody, oneof: "body" },
        { no: 12, name: "user_data_body", kind: "message", T: UserDataBody, oneof: "body" },
        { no: 14, name: "link_body", kind: "message", T: LinkBody, oneof: "body" },
        { no: 15, name: "username_proof_body", kind: "message", T: UserNameProof, oneof: "body" },
        { no: 16, name: "frame_action_body", kind: "message", T: FrameActionBody, oneof: "body" },
    ])
});
/**
 * * Adds metadata about a user
 *
 * @generated from message UserDataBody
 */
export class UserDataBody extends Message$1 {
    constructor(data) {
        super();
        /**
         * Type of metadata
         *
         * @generated from field: UserDataType type = 1;
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: UserDataType.NONE
        });
        /**
         * Value of the metadata
         *
         * @generated from field: string value = 2;
         */
        Object.defineProperty(this, "value", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UserDataBody().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserDataBody().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserDataBody().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(UserDataBody, a, b);
    }
}
Object.defineProperty(UserDataBody, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(UserDataBody, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "UserDataBody"
});
Object.defineProperty(UserDataBody, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(UserDataType) },
        { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ])
});
/**
 * @generated from message Embed
 */
export class Embed extends Message$1 {
    constructor(data) {
        super();
        /**
         * @generated from oneof Embed.embed
         */
        Object.defineProperty(this, "embed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { case: undefined }
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Embed().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Embed().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Embed().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(Embed, a, b);
    }
}
Object.defineProperty(Embed, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(Embed, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Embed"
});
Object.defineProperty(Embed, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "embed" },
        { no: 2, name: "cast_id", kind: "message", T: CastId, oneof: "embed" },
    ])
});
/**
 * * Adds a new Cast
 *
 * @generated from message CastAddBody
 */
export class CastAddBody extends Message$1 {
    constructor(data) {
        super();
        /**
         * URLs to be embedded in the cast
         *
         * @generated from field: repeated string embeds_deprecated = 1;
         */
        Object.defineProperty(this, "embedsDeprecated", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * Fids mentioned in the cast
         *
         * @generated from field: repeated uint64 mentions = 2;
         */
        Object.defineProperty(this, "mentions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * @generated from oneof CastAddBody.parent
         */
        Object.defineProperty(this, "parent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { case: undefined }
        });
        /**
         * Text of the cast
         *
         * @generated from field: string text = 4;
         */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * Positions of the mentions in the text
         *
         * @generated from field: repeated uint32 mentions_positions = 5;
         */
        Object.defineProperty(this, "mentionsPositions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * URLs or cast ids to be embedded in the cast
         *
         * @generated from field: repeated Embed embeds = 6;
         */
        Object.defineProperty(this, "embeds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CastAddBody().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CastAddBody().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CastAddBody().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CastAddBody, a, b);
    }
}
Object.defineProperty(CastAddBody, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(CastAddBody, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "CastAddBody"
});
Object.defineProperty(CastAddBody, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "embeds_deprecated", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
        { no: 2, name: "mentions", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
        { no: 3, name: "parent_cast_id", kind: "message", T: CastId, oneof: "parent" },
        { no: 7, name: "parent_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "parent" },
        { no: 4, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 5, name: "mentions_positions", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
        { no: 6, name: "embeds", kind: "message", T: Embed, repeated: true },
    ])
});
/**
 * * Removes an existing Cast
 *
 * @generated from message CastRemoveBody
 */
export class CastRemoveBody extends Message$1 {
    constructor(data) {
        super();
        /**
         * Hash of the cast to remove
         *
         * @generated from field: bytes target_hash = 1;
         */
        Object.defineProperty(this, "targetHash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CastRemoveBody().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CastRemoveBody().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CastRemoveBody().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CastRemoveBody, a, b);
    }
}
Object.defineProperty(CastRemoveBody, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(CastRemoveBody, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "CastRemoveBody"
});
Object.defineProperty(CastRemoveBody, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "target_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ])
});
/**
 * * Identifier used to look up a Cast
 *
 * @generated from message CastId
 */
export class CastId extends Message$1 {
    constructor(data) {
        super();
        /**
         * Fid of the user who created the cast
         *
         * @generated from field: uint64 fid = 1;
         */
        Object.defineProperty(this, "fid", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: protoInt64.zero
        });
        /**
         * Hash of the cast
         *
         * @generated from field: bytes hash = 2;
         */
        Object.defineProperty(this, "hash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CastId().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CastId().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CastId().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(CastId, a, b);
    }
}
Object.defineProperty(CastId, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(CastId, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "CastId"
});
Object.defineProperty(CastId, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "fid", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
        { no: 2, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ])
});
/**
 * * Adds or removes a Reaction from a Cast
 *
 * @generated from message ReactionBody
 */
export class ReactionBody extends Message$1 {
    constructor(data) {
        super();
        /**
         * Type of reaction
         *
         * @generated from field: ReactionType type = 1;
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ReactionType.NONE
        });
        /**
         * @generated from oneof ReactionBody.target
         */
        Object.defineProperty(this, "target", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { case: undefined }
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ReactionBody().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ReactionBody().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ReactionBody().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(ReactionBody, a, b);
    }
}
Object.defineProperty(ReactionBody, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(ReactionBody, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "ReactionBody"
});
Object.defineProperty(ReactionBody, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(ReactionType) },
        { no: 2, name: "target_cast_id", kind: "message", T: CastId, oneof: "target" },
        { no: 3, name: "target_url", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
    ])
});
/**
 * * Adds a Verification of ownership of an Address based on Protocol
 *
 * @generated from message VerificationAddAddressBody
 */
export class VerificationAddAddressBody extends Message$1 {
    constructor(data) {
        super();
        /**
         * Address being verified for a given Protocol
         *
         * @generated from field: bytes address = 1;
         */
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * Signature produced by the user's address for a given Protocol
         *
         * @generated from field: bytes claim_signature = 2;
         */
        Object.defineProperty(this, "claimSignature", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * Hash of the latest Ethereum block when the signature was produced
         *
         * @generated from field: bytes block_hash = 3;
         */
        Object.defineProperty(this, "blockHash", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * Type of verification. 0 = EOA, 1 = contract
         *
         * @generated from field: uint32 verification_type = 4;
         */
        Object.defineProperty(this, "verificationType", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        /**
         * 0 for EOA verifications, 1 or 10 for contract verifications
         *
         * @generated from field: uint32 chain_id = 5;
         */
        Object.defineProperty(this, "chainId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        /**
         * Protocol of the Verification
         *
         * @generated from field: Protocol protocol = 7;
         */
        Object.defineProperty(this, "protocol", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Protocol.ETHEREUM
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerificationAddAddressBody().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerificationAddAddressBody().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerificationAddAddressBody().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VerificationAddAddressBody, a, b);
    }
}
Object.defineProperty(VerificationAddAddressBody, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(VerificationAddAddressBody, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "VerificationAddAddressBody"
});
Object.defineProperty(VerificationAddAddressBody, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "claim_signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 3, name: "block_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 4, name: "verification_type", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
        { no: 5, name: "chain_id", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
        { no: 7, name: "protocol", kind: "enum", T: proto3.getEnumType(Protocol) },
    ])
});
/**
 * * Removes a Verification of a given protocol
 *
 * @generated from message VerificationRemoveBody
 */
export class VerificationRemoveBody extends Message$1 {
    constructor(data) {
        super();
        /**
         * Address of the Verification to remove
         *
         * @generated from field: bytes address = 1;
         */
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * Protocol of the Verification to remove
         *
         * @generated from field: Protocol protocol = 2;
         */
        Object.defineProperty(this, "protocol", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: Protocol.ETHEREUM
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new VerificationRemoveBody().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new VerificationRemoveBody().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new VerificationRemoveBody().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(VerificationRemoveBody, a, b);
    }
}
Object.defineProperty(VerificationRemoveBody, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(VerificationRemoveBody, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "VerificationRemoveBody"
});
Object.defineProperty(VerificationRemoveBody, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "protocol", kind: "enum", T: proto3.getEnumType(Protocol) },
    ])
});
/**
 * * Adds or removes a Link
 *
 * @generated from message LinkBody
 */
export class LinkBody extends Message$1 {
    constructor(data) {
        super();
        /**
         * Type of link, <= 8 characters
         *
         * @generated from field: string type = 1;
         */
        Object.defineProperty(this, "type", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ""
        });
        /**
         * User-defined timestamp that preserves original timestamp when message.data.timestamp needs to be updated for compaction
         *
         * @generated from field: optional uint32 displayTimestamp = 2;
         */
        Object.defineProperty(this, "displayTimestamp", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * @generated from oneof LinkBody.target
         */
        Object.defineProperty(this, "target", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: { case: undefined }
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LinkBody().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LinkBody().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LinkBody().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(LinkBody, a, b);
    }
}
Object.defineProperty(LinkBody, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(LinkBody, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "LinkBody"
});
Object.defineProperty(LinkBody, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "displayTimestamp", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
        { no: 3, name: "target_fid", kind: "scalar", T: 4 /* ScalarType.UINT64 */, oneof: "target" },
    ])
});
/**
 * * A Farcaster Frame action
 *
 * @generated from message FrameActionBody
 */
export class FrameActionBody extends Message$1 {
    constructor(data) {
        super();
        /**
         * URL of the Frame triggering the action
         *
         * @generated from field: bytes url = 1;
         */
        Object.defineProperty(this, "url", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * The index of the button pressed (1-4)
         *
         * @generated from field: uint32 button_index = 2;
         */
        Object.defineProperty(this, "buttonIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        /**
         * The cast which contained the frame url
         *
         * @generated from field: CastId cast_id = 3;
         */
        Object.defineProperty(this, "castId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Text input from the user, if present
         *
         * @generated from field: bytes input_text = 4;
         */
        Object.defineProperty(this, "inputText", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * Serialized frame state value
         *
         * @generated from field: bytes state = 5;
         */
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * Chain-specific transaction ID for tx actions
         *
         * @generated from field: bytes transaction_id = 6;
         */
        Object.defineProperty(this, "transactionId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        /**
         * Chain-specific address for tx actions
         *
         * @generated from field: bytes address = 7;
         */
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new Uint8Array(0)
        });
        proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FrameActionBody().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FrameActionBody().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FrameActionBody().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return proto3.util.equals(FrameActionBody, a, b);
    }
}
Object.defineProperty(FrameActionBody, "runtime", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3
});
Object.defineProperty(FrameActionBody, "typeName", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "FrameActionBody"
});
Object.defineProperty(FrameActionBody, "fields", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: proto3.util.newFieldList(() => [
        { no: 1, name: "url", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 2, name: "button_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
        { no: 3, name: "cast_id", kind: "message", T: CastId },
        { no: 4, name: "input_text", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 5, name: "state", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 6, name: "transaction_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
        { no: 7, name: "address", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    ])
});
//# sourceMappingURL=message_pb.js.map