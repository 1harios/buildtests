import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
/**
 * @generated from enum UserNameType
 */
export declare enum UserNameType {
    /**
     * @generated from enum value: USERNAME_TYPE_NONE = 0;
     */
    USERNAME_TYPE_NONE = 0,
    /**
     * @generated from enum value: USERNAME_TYPE_FNAME = 1;
     */
    USERNAME_TYPE_FNAME = 1,
    /**
     * @generated from enum value: USERNAME_TYPE_ENS_L1 = 2;
     */
    USERNAME_TYPE_ENS_L1 = 2
}
/**
 * @generated from message UserNameProof
 */
export declare class UserNameProof extends Message<UserNameProof> {
    /**
     * @generated from field: uint64 timestamp = 1;
     */
    timestamp: bigint;
    /**
     * @generated from field: bytes name = 2;
     */
    name: Uint8Array;
    /**
     * @generated from field: bytes owner = 3;
     */
    owner: Uint8Array;
    /**
     * @generated from field: bytes signature = 4;
     */
    signature: Uint8Array;
    /**
     * @generated from field: uint64 fid = 5;
     */
    fid: bigint;
    /**
     * @generated from field: UserNameType type = 6;
     */
    type: UserNameType;
    constructor(data?: PartialMessage<UserNameProof>);
    static readonly runtime: typeof proto3;
    static readonly typeName = "UserNameProof";
    static readonly fields: FieldList;
    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserNameProof;
    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserNameProof;
    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserNameProof;
    static equals(a: UserNameProof | PlainMessage<UserNameProof> | undefined, b: UserNameProof | PlainMessage<UserNameProof> | undefined): boolean;
}
//# sourceMappingURL=username_proof_pb.d.ts.map