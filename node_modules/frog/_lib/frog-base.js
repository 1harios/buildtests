import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "frog/jsx/jsx-runtime";
import { detect } from 'detect-browser';
import { Hono } from 'hono';
import { ImageResponse } from 'hono-og';
import { inspectRoutes } from 'hono/dev';
import { html } from 'hono/html';
import lz from 'lz-string';
// TODO: maybe write our own "modern" universal path (or resolve) module.
// We are not using `node:path` to remain compatible with Edge runtimes.
import { default as p } from 'path-browserify';
import { fromQuery } from './utils/fromQuery.js';
import { getButtonValues } from './utils/getButtonValues.js';
import { getCastActionContext } from './utils/getCastActionContext.js';
import { getFrameContext } from './utils/getFrameContext.js';
import { getImageContext } from './utils/getImageContext.js';
import { getImagePaths } from './utils/getImagePaths.js';
import { getRequestUrl } from './utils/getRequestUrl.js';
import { getRouteParameters } from './utils/getRouteParameters.js';
import { getSignatureContext } from './utils/getSignatureContext.js';
import { getTransactionContext } from './utils/getTransactionContext.js';
import * as jws from './utils/jws.js';
import { parseBrowserLocation } from './utils/parseBrowserLocation.js';
import { parseFonts } from './utils/parseFonts.js';
import { parseHonoPath } from './utils/parseHonoPath.js';
import { parseImage } from './utils/parseImage.js';
import { parseIntents } from './utils/parseIntents.js';
import { parsePath } from './utils/parsePath.js';
import { requestBodyToContext } from './utils/requestBodyToContext.js';
import { serializeJson } from './utils/serializeJson.js';
import { toSearchParams } from './utils/toSearchParams.js';
import { version } from './version.js';
/**
 * A Frog instance.
 *
 * @param parameters - {@link FrogConstructorParameters}
 * @returns instance. {@link Frog}
 *
 * @example
 * ```
 * import { Frog } from 'frog'
 *
 * const app = new Frog()
 *
 * app.frame('/', (c) => {
 *   const { buttonValue, inputText, status } = c
 *   const fruit = inputText || buttonValue
 *   return c.res({
 *     image: (
 *       <div style={{ fontSize: 60 }}>
 *         {fruit ? `You selected: ${fruit}` : 'Welcome!'}
 *       </div>
 *     ),
 *     intents: [
 *       <Button value="apples">Apples</Button>,
 *       <Button value="oranges">Oranges</Button>,
 *       <Button value="bananas">Bananas</Button>,
 *     ]
 *   })
 * })
 * ```
 */
export class FrogBase {
    constructor(parameters) {
        // Note: not using native `private` fields to avoid tslib being injected
        // into bundled code.
        Object.defineProperty(this, "_initialState", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: undefined
        });
        /** Path for assets. */
        Object.defineProperty(this, "assetsPath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Base path of the server instance. */
        Object.defineProperty(this, "basePath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** URL to redirect to when the user is coming to the page via a browser. */
        Object.defineProperty(this, "browserLocation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "dev", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Hono instance. */
        Object.defineProperty(this, "hono", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Farcaster Hub API URL. */
        Object.defineProperty(this, "hubApiUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Farcaster Hub API config. */
        Object.defineProperty(this, "hub", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Image aspect ratio. */
        Object.defineProperty(this, "imageAspectRatio", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: '1.91:1'
        });
        /** Image options. */
        Object.defineProperty(this, "imageOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Origin URL of the server instance. */
        Object.defineProperty(this, "origin", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "fetch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "get", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "post", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Key used to sign secret data. */
        Object.defineProperty(this, "secret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Title of the frame to be set at `og:title` **/
        Object.defineProperty(this, "title", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** FrogUI configuration. */
        Object.defineProperty(this, "ui", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** Whether or not frames should be verified. */
        Object.defineProperty(this, "verify", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "metaTags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_dev", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "version", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: version
        });
        Object.defineProperty(this, "castAction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (...parameters) => {
                const [path, middlewares, handler, options] = getRouteParameters(...parameters);
                const { verify = this.verify } = options;
                // Cast Action Route (implements GET).
                if ('handler' in options) {
                    this.hono.get(parseHonoPath(path), ...middlewares, async (c) => {
                        const url = getRequestUrl(c.req);
                        const { aboutUrl, name, description, icon } = await options.handler(c);
                        return c.json({
                            aboutUrl,
                            action: {
                                type: 'post',
                            },
                            name,
                            description,
                            icon,
                            postUrl: url,
                        });
                    });
                }
                else {
                    const { aboutUrl, name, description, icon } = options;
                    this.hono.get(parseHonoPath(path), ...middlewares, async (c) => {
                        const url = getRequestUrl(c.req);
                        return c.json({
                            aboutUrl,
                            action: {
                                type: 'post',
                            },
                            name,
                            description,
                            icon,
                            postUrl: url,
                        });
                    });
                }
                // Cast Action Route (implements POST).
                this.hono.post(parseHonoPath(path), ...middlewares, async (c) => {
                    const url = getRequestUrl(c.req);
                    const origin = this.origin ?? url.origin;
                    const baseUrl = origin + parsePath(this.basePath);
                    const { context } = getCastActionContext({
                        context: await requestBodyToContext(c, {
                            hub: this.hub ||
                                (this.hubApiUrl ? { apiUrl: this.hubApiUrl } : undefined),
                            secret: this.secret,
                            verify,
                        }),
                    });
                    const response = await handler(context);
                    if (response instanceof Response)
                        return response;
                    if (response.status === 'error') {
                        c.status(response.error.statusCode ?? 400);
                        return c.json({ message: response.error.message });
                    }
                    if (response.data.type === 'frame') {
                        const framePath = response.data.path;
                        return c.json({
                            frameUrl: framePath.startsWith('http')
                                ? framePath
                                : baseUrl + parsePath(framePath),
                            type: 'frame',
                        });
                    }
                    const { message, link } = response.data;
                    return c.json({ message, link, type: 'message' });
                });
                return this;
            }
        });
        Object.defineProperty(this, "frame", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (...parameters) => {
                const [path, middlewares, handler, options = {}] = getRouteParameters(...parameters);
                const { verify = this.verify } = options;
                // OG Image Route
                const imagePaths = getImagePaths(parseHonoPath(path));
                for (const imagePath of imagePaths) {
                    this.hono.get(imagePath, async (c) => {
                        const defaultImageOptions = await (async () => {
                            if (typeof this.imageOptions === 'function')
                                return await this.imageOptions();
                            return this.imageOptions;
                        })();
                        const fonts = await (async () => {
                            if (this.ui?.vars?.fonts)
                                return Object.values(this.ui?.vars.fonts).flat();
                            if (typeof options?.fonts === 'function')
                                return await options.fonts();
                            if (options?.fonts)
                                return options.fonts;
                            return defaultImageOptions?.fonts;
                        })();
                        const { headers = this.headers, image, imageOptions = defaultImageOptions, } = fromQuery(c.req.query());
                        const image_ = JSON.parse(lz.decompressFromEncodedURIComponent(image));
                        return new ImageResponse(image_, {
                            width: 1200,
                            height: 630,
                            ...imageOptions,
                            format: imageOptions?.format ?? 'png',
                            fonts: await parseFonts(fonts),
                            headers: imageOptions?.headers ?? headers,
                        });
                    });
                }
                // Frame Route (implements GET & POST).
                this.hono.use(parseHonoPath(path), ...middlewares, async (c) => {
                    const url = getRequestUrl(c.req);
                    const origin = this.origin ?? url.origin;
                    const assetsUrl = origin + parsePath(this.assetsPath);
                    const baseUrl = origin + parsePath(this.basePath);
                    const initialBaseUrl = origin +
                        parsePath(
                        // @ts-ignore - private
                        this.initialBasePath);
                    const { context, getState } = getFrameContext({
                        context: await requestBodyToContext(c, {
                            hub: this.hub ||
                                (this.hubApiUrl ? { apiUrl: this.hubApiUrl } : undefined),
                            secret: this.secret,
                            verify,
                        }),
                        initialState: this._initialState,
                        origin,
                    });
                    if (context.url !== parsePath(url.href))
                        return c.redirect(context.url);
                    const response = await handler(context);
                    if (response instanceof Response)
                        return response;
                    if (response.status === 'error') {
                        c.status(response.error.statusCode ?? 400);
                        return c.json({ message: response.error.message });
                    }
                    const { action, browserLocation = this.browserLocation, headers = this.headers, imageAspectRatio = this.imageAspectRatio, image, imageOptions: imageOptions_ = this.imageOptions, intents, ogImage, title = this.title, } = response.data;
                    const buttonValues = getButtonValues(parseIntents(intents, {
                        baseUrl,
                        initialBaseUrl,
                    }));
                    if (context.status === 'redirect' && context.buttonIndex) {
                        const buttonValue = buttonValues[context.buttonIndex - 1];
                        const location = buttonValue?.replace(/^_r:/, '');
                        if (!location)
                            throw new Error('location required to redirect');
                        return c.redirect(location, 302);
                    }
                    const renderAsHTML = c.req.header('Accept') === 'text/html' ||
                        c.req.query('accept') === 'text/html';
                    // If the user is coming from a browser, and a `browserLocation` is set,
                    // then we will redirect the user to that location.
                    const browser = detect(c.req.header('user-agent'));
                    const browserLocation_ = parseBrowserLocation(c, browserLocation, {
                        basePath: this.basePath,
                        path,
                    });
                    if (!renderAsHTML && browser?.name && browserLocation_)
                        return c.redirect(browserLocation_.startsWith('http')
                            ? browserLocation_
                            : `${origin + p.resolve(this.basePath, browserLocation_)}`, 302);
                    // Derive the previous state, and sign it if a secret is provided.
                    const previousState = await (async () => {
                        const state = await context.deriveState();
                        if (!this.secret)
                            return state;
                        if (!state)
                            return state;
                        return jws.sign(JSON.stringify(state), this.secret);
                    })();
                    // We need to pass some context to the next frame to derive button values, state, etc.
                    // Here, we are deriving two sets of "next frame state".
                    // 1. For the INITIAL FRAME, we need to pass through the state as a search parameter
                    //    due to Farcaster's constraints with the `fc:frame:state` tag. It must be empty
                    //    for the initial frame.
                    // 2. For SUBSEQUENT FRAMES, we can pass through the state as a serialized JSON object
                    //    to the next frame via the `fc:frame:state` tag.
                    const nextFrameStateSearch = toSearchParams({
                        initialPath: context.initialPath,
                        previousButtonValues: buttonValues,
                    });
                    const nextFrameStateMeta = serializeJson({
                        initialPath: context.initialPath,
                        previousButtonValues: buttonValues,
                        previousState,
                    });
                    const imageOptions = await (async () => {
                        if (typeof imageOptions_ === 'function')
                            return await imageOptions_();
                        return imageOptions_;
                    })();
                    const imageUrl = await (async () => {
                        if (typeof image !== 'string') {
                            const compressedImage = lz.compressToEncodedURIComponent(JSON.stringify(await parseImage(_jsx("div", { style: {
                                    display: 'flex',
                                    flexDirection: 'column',
                                    height: '100%',
                                    width: '100%',
                                }, children: await image }), {
                                assetsUrl,
                                ui: {
                                    ...this.ui,
                                    vars: {
                                        ...this.ui?.vars,
                                        frame: {
                                            height: imageOptions?.height,
                                            width: imageOptions?.width,
                                        },
                                    },
                                },
                            })));
                            const imageParams = toSearchParams({
                                image: compressedImage,
                                imageOptions,
                                headers,
                            });
                            return `${parsePath(context.url)}/image?${imageParams}`;
                        }
                        if (image.startsWith('http') || image.startsWith('data'))
                            return image;
                        const isHandlerPresentOnImagePath = (() => {
                            const routes = inspectRoutes(this.hono);
                            const matchesWithoutParamsStash = this.hono.router
                                .match('GET', 
                            // `this.initialBasePath` and `this.basePath` are equal only when this handler is triggered at
                            // the top `Frog` instance.
                            //
                            // However, such are not equal when an instance of `Frog` is routed to another one via `.route`,
                            // and since we not expect one to set `basePath` to the instance which is being routed to, we can
                            // safely assume it's only set at the top level, as doing otherwise is irrational.
                            //
                            // Since `this.basePath` is set at the top instance, we have to account for that while looking for a match.
                            //
                            // @ts-ignore - accessing a private field
                            this.initialBasePath === this.basePath
                                ? this.basePath + parsePath(image)
                                : parsePath(image))
                                .filter((routeOrParams) => typeof routeOrParams[0] !== 'string');
                            const matchedRoutes = matchesWithoutParamsStash
                                .flat(1)
                                .map((matchedRouteWithoutParams) => matchedRouteWithoutParams[0][1]);
                            const nonMiddlewareMatchedRoutes = matchedRoutes.filter((matchedRoute) => {
                                const routeWithAdditionalInfo = routes.find((route) => route.path === matchedRoute.path &&
                                    route.method === matchedRoute.method);
                                if (!routeWithAdditionalInfo)
                                    throw new Error('Unexpected error: Matched a route that is not in the list of all routes.');
                                return !routeWithAdditionalInfo.isMiddleware;
                            });
                            return nonMiddlewareMatchedRoutes.length !== 0;
                        })();
                        if (isHandlerPresentOnImagePath)
                            return `${baseUrl + parsePath(image)}`;
                        return `${assetsUrl + parsePath(image)}`;
                    })();
                    const ogImageUrl = (() => {
                        if (!ogImage)
                            return undefined;
                        if (ogImage.startsWith('http'))
                            return ogImage;
                        return baseUrl + parsePath(ogImage);
                    })();
                    const postUrl = (() => {
                        if (!action)
                            return context.url;
                        if (action.startsWith('http'))
                            return action;
                        if (action.startsWith('~'))
                            return initialBaseUrl + parsePath(action.slice(1));
                        return baseUrl + parsePath(action);
                    })();
                    const parsedIntents = parseIntents(intents, {
                        initialBaseUrl,
                        baseUrl,
                        search: context.status === 'initial'
                            ? nextFrameStateSearch.toString()
                            : undefined,
                    });
                    // Set response headers provided by consumer.
                    for (const [key, value] of Object.entries(headers ?? {}))
                        c.header(key, value);
                    if (renderAsHTML) {
                        const height = imageOptions?.height ?? 630;
                        const width = imageOptions?.width ?? 1200;
                        // Convert `tw` to `class`
                        const __html = image.toString().replace(/tw=/g, 'class=');
                        const fonts = await (async () => {
                            if (this.ui?.vars?.fonts)
                                return Object.values(this.ui.vars.fonts).flat();
                            if (typeof options?.fonts === 'function')
                                return await options.fonts();
                            if (options?.fonts)
                                return options.fonts;
                            return imageOptions?.fonts;
                        })();
                        const groupedFonts = new Map();
                        if (fonts)
                            for (const font of fonts) {
                                const key = `${font.source ? `${font.source}:` : ''}${font.name}`;
                                if (groupedFonts.has(key))
                                    groupedFonts.get(key)?.push(font);
                                else
                                    groupedFonts.set(key, [font]);
                            }
                        const googleFonts = [];
                        for (const item of groupedFonts) {
                            const [, fonts] = item;
                            const font = fonts[0];
                            if (font?.source === 'google') {
                                const name = font.name.replace(' ', '+');
                                const hasItalic = fonts.some((x) => x.style === 'italic');
                                const attributeKeys = hasItalic ? 'ital,wght' : 'wght';
                                const attributeValues = fonts
                                    .map((x) => {
                                    if (hasItalic) {
                                        if (x.style === 'italic')
                                            return `1,${x.weight}`;
                                        return `0,${x.weight}`;
                                    }
                                    return x.weight;
                                })
                                    .join(';');
                                const url = `https://fonts.googleapis.com/css2?family=${name}${attributeValues ? `:${attributeKeys}@${attributeValues}` : ''}&display=swap`;
                                googleFonts.push(url);
                            }
                        }
                        return c.html(_jsxs(_Fragment, { children: [_jsx("script", { src: "https://cdn.tailwindcss.com" }), _jsx("script", { children: html `
                tailwind.config = {
                  plugins: [{
                    handler({ addBase }) {
                      addBase({ 'html': { 'line-height': 1.2 } })
                    },
                  }],
                }
              ` }), _jsx("style", { 
                                    // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>
                                    dangerouslySetInnerHTML: {
                                        __html: `@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&family=Material+Icons');body{display:flex;height:100%;margin:0;tab-size:8;font-family:Inter,sans-serif;overflow:hidden}body>div,body>div *{box-sizing:border-box;display:flex}body{background:#1A1A19;}link,script,style{position: absolute;width: 1px;height: 1px;padding: 0;margin: -1px;overflow: hidden;clip: rect(0, 0, 0, 0);white-space: nowrap;border-width: 0;}`,
                                    } }), Boolean(googleFonts.length) && (_jsxs(_Fragment, { children: [_jsx("link", { rel: "preconnect", href: "https://fonts.googleapis.com" }), _jsx("link", { rel: "preconnect", href: "https://fonts.gstatic.com", crossOrigin: true }), googleFonts.map((url) => (_jsx("link", { href: url, rel: "stylesheet" })))] })), _jsx("div", { className: "bg-black", 
                                    // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>
                                    dangerouslySetInnerHTML: { __html }, style: { height, width } })] }));
                    }
                    const metaTagsMap = new Map();
                    for (const tag of [
                        ...(response.data.unstable_metaTags ?? []),
                        ...(this.metaTags ?? []),
                    ]) {
                        if (metaTagsMap.has(tag.property))
                            continue;
                        metaTagsMap.set(tag.property, tag.content);
                    }
                    const metaTags = metaTagsMap.size === 0
                        ? []
                        : Array.from(metaTagsMap).map((x) => ({
                            property: x[0],
                            content: x[1],
                        }));
                    return c.render(_jsxs(_Fragment, { children: [html `<!DOCTYPE html>`, _jsxs("html", { lang: "en", children: [_jsxs("head", { children: [_jsx("meta", { property: "fc:frame", content: "vNext" }), _jsx("meta", { property: "fc:frame:image:aspect_ratio", content: imageAspectRatio }), _jsx("meta", { property: "fc:frame:image", content: imageUrl }), _jsx("meta", { property: "og:image", content: ogImageUrl ?? imageUrl }), _jsx("meta", { property: "og:title", content: title }), _jsx("meta", { property: "fc:frame:post_url", content: context.status === 'initial'
                                                    ? `${postUrl}?${nextFrameStateSearch.toString()}`
                                                    : postUrl }), context.status !== 'initial' && (_jsx("meta", { property: "fc:frame:state", content: nextFrameStateMeta })), parsedIntents, _jsx("meta", { property: "frog:version", content: version }), c.req.header('x-frog-dev') !== undefined && (_jsx("meta", { property: "frog:context", content: serializeJson({
                                                    ...context,
                                                    // note: unserializable entities are undefined.
                                                    env: context.env
                                                        ? Object.assign(context.env, {
                                                            incoming: undefined,
                                                            outgoing: undefined,
                                                        })
                                                        : undefined,
                                                    req: undefined,
                                                    state: getState(),
                                                }) })), metaTags.map((tag) => (_jsx("meta", { property: tag.property, content: tag.content })))] }), _jsx("body", {})] })] }));
                });
                return this;
            }
        });
        Object.defineProperty(this, "image", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (...parameters) => {
                const [path, middlewares, handler, options = {}] = getRouteParameters(...parameters);
                if (path.endsWith('/image'))
                    throw new Error('Image handler path cannot end with `/image` as it might conflict with internal frame image handler path that also ends with `/image`.');
                this.hono.get(path, ...middlewares, async (c) => {
                    const url = getRequestUrl(c.req);
                    const origin = this.origin ?? url.origin;
                    const assetsUrl = origin + parsePath(this.assetsPath);
                    const { context } = getImageContext({
                        context: c,
                    });
                    const response = await handler(context);
                    if (response.status !== 'success')
                        throw new Error(`Unexepcted Error: Image response must always have value 'success'.`);
                    const defaultImageOptions = await (async () => {
                        if (typeof this.imageOptions === 'function')
                            return await this.imageOptions();
                        return this.imageOptions;
                    })();
                    const fonts = await (async () => {
                        if (this.ui?.vars?.fonts)
                            return Object.values(this.ui?.vars.fonts).flat();
                        if (typeof options?.fonts === 'function')
                            return await options.fonts();
                        if (options?.fonts)
                            return options.fonts;
                        return defaultImageOptions?.fonts;
                    })();
                    const { headers = this.headers, image, imageOptions = defaultImageOptions, } = response.data;
                    return new ImageResponse((await parseImage(_jsx("div", { style: {
                            display: 'flex',
                            flexDirection: 'column',
                            height: '100%',
                            width: '100%',
                        }, children: await image }), {
                        assetsUrl,
                        ui: {
                            ...this.ui,
                            vars: {
                                ...this.ui?.vars,
                                frame: {
                                    height: imageOptions?.height,
                                    width: imageOptions?.width,
                                },
                            },
                        },
                    })), {
                        width: 1200,
                        height: 630,
                        ...imageOptions,
                        format: imageOptions?.format ?? 'png',
                        fonts: await parseFonts(fonts),
                        headers: imageOptions?.headers ?? headers,
                    });
                });
                return this;
            }
        });
        Object.defineProperty(this, "transaction", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (...parameters) => {
                const [path, middlewares, handler, options = {}] = getRouteParameters(...parameters);
                const { verify = this.verify } = options;
                this.hono.post(parseHonoPath(path), ...middlewares, async (c) => {
                    const { context } = getTransactionContext({
                        context: await requestBodyToContext(c, {
                            hub: this.hub ||
                                (this.hubApiUrl ? { apiUrl: this.hubApiUrl } : undefined),
                            secret: this.secret,
                            verify,
                        }),
                        req: c.req,
                    });
                    const response = await handler(context);
                    if (response instanceof Response)
                        return response;
                    if (response.status === 'error') {
                        c.status(response.error.statusCode ?? 400);
                        return c.json({ message: response.error.message });
                    }
                    return c.json(response.data);
                });
                return this;
            }
        });
        Object.defineProperty(this, "signature", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (...parameters) => {
                const [path, middlewares, handler, options = {}] = getRouteParameters(...parameters);
                const { verify = this.verify } = options;
                this.hono.post(parseHonoPath(path), ...middlewares, async (c) => {
                    const { context } = getSignatureContext({
                        context: await requestBodyToContext(c, {
                            hub: this.hub ||
                                (this.hubApiUrl ? { apiUrl: this.hubApiUrl } : undefined),
                            secret: this.secret,
                            verify,
                        }),
                        req: c.req,
                    });
                    const response = await handler(context);
                    if (response instanceof Response)
                        return response;
                    if (response.status === 'error') {
                        c.status(response.error.statusCode ?? 400);
                        return c.json({ message: response.error.message });
                    }
                    return c.text(JSON.stringify(response.data, (_, value) => typeof value === 'bigint' ? value.toString() : value), 200, { 'Content-Type': 'application/json' });
                });
                return this;
            }
        });
        Object.defineProperty(this, "use", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (...args) => {
                this.hono.use(...args);
                return this;
            }
        });
        const { assetsPath, basePath, browserLocation, dev, headers, honoOptions, hubApiUrl, hub, imageAspectRatio, imageOptions, initialState, origin, secret, title, ui, unstable_metaTags, verify, } = parameters;
        this.hono = new Hono(honoOptions);
        if (basePath)
            this.hono = this.hono.basePath(basePath);
        if (browserLocation)
            this.browserLocation = browserLocation;
        if (headers)
            this.headers = headers;
        if (hubApiUrl)
            this.hubApiUrl = hubApiUrl;
        if (hub)
            this.hub = hub;
        if (imageAspectRatio)
            this.imageAspectRatio = imageAspectRatio;
        if (imageOptions)
            this.imageOptions = imageOptions;
        if (unstable_metaTags)
            this.metaTags = unstable_metaTags;
        if (origin)
            this.origin = origin;
        if (secret)
            this.secret = secret;
        this.title = title;
        if (ui)
            this.ui = ui;
        if (typeof verify !== 'undefined')
            this.verify = verify;
        this.basePath = basePath ?? '/';
        // @ts-ignore - private
        this.initialBasePath = this.basePath;
        this.assetsPath = assetsPath ?? this.basePath;
        this.fetch = this.hono.fetch.bind(this.hono);
        this.get = this.hono.get.bind(this.hono);
        this.post = this.hono.post.bind(this.hono);
        if (initialState)
            this._initialState = initialState;
        if (dev)
            this.dev = { enabled: true, ...(dev ?? {}) };
        this._dev = undefined; // this is set `true` by `devtools` helper
        // allow devtools to work with dynamic params off base path
        this.hono.all('*', async (c, next) => {
            if (this._dev)
                for (const { handler, path } of c.req.matchedRoutes)
                    if (path === this._dev)
                        return handler(c, next);
            await next();
        });
    }
    route(path, frog) {
        if (frog.assetsPath === '/')
            frog.assetsPath = this.assetsPath;
        if (frog.basePath === '/') {
            // @ts-ignore - private
            frog.initialBasePath = this.initialBasePath ?? parsePath(this.basePath);
            frog.basePath = parsePath(this.basePath) + parsePath(path);
        }
        if (!frog.browserLocation)
            frog.browserLocation = this.browserLocation;
        if (!frog.dev)
            frog.dev = this.dev;
        if (!frog.headers)
            frog.headers = this.headers;
        if (!frog.hubApiUrl)
            frog.hubApiUrl = this.hubApiUrl;
        if (!frog.hub)
            frog.hub = this.hub;
        if (!frog.imageOptions)
            frog.imageOptions = this.imageOptions;
        if (!frog.origin)
            frog.origin = this.origin;
        if (!frog.secret)
            frog.secret = this.secret;
        if (!frog.ui)
            frog.ui = this.ui;
        if (!frog.verify)
            frog.verify = this.verify;
        this.hono.route(path, frog.hono);
        return this;
    }
}
//# sourceMappingURL=frog-base.js.map