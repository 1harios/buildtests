import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "frog/jsx/jsx-runtime";
import { Hono } from 'hono';
import { getCookie } from 'hono/cookie';
import { inspectRoutes } from 'hono/dev';
import { html } from 'hono/html';
import { HTTPException } from 'hono/http-exception';
import { getRequestUrl } from '../utils/getRequestUrl.js';
import { apiRoutes, getFrameUrls, getInitialData, } from './api.js';
import { uiDistDir } from './constants.js';
import { getUserDataByFid } from './utils/warpcast.js';
export function devtools(frog, options) {
    if (!(frog.dev?.enabled ?? true))
        return;
    const { appFid = frog.dev?.appFid, appMnemonic = frog.dev?.appMnemonic, assetsPath, basePath = '/dev', root, serveStatic, serveStaticOptions, } = options ?? {};
    let publicPath = '';
    if (assetsPath)
        publicPath = assetsPath === '/' ? '' : assetsPath;
    else if (serveStatic)
        publicPath = `.${basePath}`;
    else if (frog.assetsPath)
        publicPath = frog.assetsPath === '/' ? '' : frog.assetsPath;
    else
        publicPath = `/${uiDistDir}`;
    const rootBasePath = frog.basePath === '/' ? '' : frog.basePath;
    const devBasePath = `${rootBasePath}${basePath}`;
    const app = routes({
        appFid,
        appMnemonic,
        basePath: devBasePath,
        hub: frog.hub || (frog.hubApiUrl ? { apiUrl: frog.hubApiUrl } : undefined),
        publicPath,
        root,
        routes: inspectRoutes(frog.hono),
        secret: frog.secret,
        serveStatic,
        serveStaticOptions,
    });
    frog.hono.route(basePath, app);
    frog._dev = devBasePath;
}
export function routes(options) {
    const { appFid, appMnemonic, basePath, hub, publicPath, root, routes, secret, serveStatic, serveStaticOptions, } = options;
    const app = new Hono();
    const assetsPath = publicPath.endsWith('/')
        ? publicPath.replace(/\/$/, '')
        : publicPath;
    app
        .get('/', async (c) => {
        const { origin } = getRequestUrl(c.req);
        const baseUrl = `${origin}${basePath}`;
        let frameUrls = [];
        let initialData = undefined;
        const url = c.req.query('url');
        if (url || routes.length) {
            frameUrls = getFrameUrls(origin, routes);
            let frameUrl = frameUrls[0];
            if (url) {
                const tmpUrl = `${origin}${url}`;
                if (url.startsWith('/'))
                    frameUrl = tmpUrl;
                else
                    frameUrl = url;
            }
            try {
                if (frameUrl)
                    initialData = (await getInitialData(frameUrl));
            }
            catch (error) {
                if (error instanceof HTTPException)
                    throw error;
            }
        }
        let user = undefined;
        const cookie = getCookie(c, 'frog_user') ?? getCookie(c, 'user');
        if (cookie)
            try {
                const parsed = JSON.parse(cookie);
                if (parsed && hub) {
                    const data = await getUserDataByFid(hub, parsed.userFid);
                    user = { state: 'completed', ...parsed, ...data };
                }
            }
            catch { }
        const bootstrap = JSON.stringify({
            data: initialData,
            frameUrls,
            user,
        });
        const title = initialData
            ? `frame: ${new URL(initialData.url).pathname}`
            : 'Frog Devtools';
        return c.html(_jsxs(_Fragment, { children: [html `<!doctype html>`, _jsxs("html", { lang: "en", children: [_jsxs("head", { children: [_jsx("meta", { charset: "UTF-8" }), _jsx("meta", { name: "viewport", content: "width=device-width, initial-scale=1.0" }), _jsx("title", { children: title }), _jsx("script", { type: "module", children: html `globalThis.__FROG_BASE_URL__ = '${baseUrl}'` }), _jsx("script", { type: "module", crossorigin: "", src: `${assetsPath}/main.js` }), _jsx("link", { rel: "stylesheet", crossorigin: "", href: `${assetsPath}/assets/main.css` }), _jsx("link", { rel: "alternate icon", type: "image/png", href: `${assetsPath}/assets/icon.png` }), _jsx("style", { id: "__SSR_STYLE__", children: html `
                  @media (prefers-color-scheme: dark) {
                    html {
                      background-color: #000;
                    }
                  }
                ` })] }), _jsxs("body", { children: [_jsx("div", { id: "root" }), _jsx("script", { id: "__FROG_DATA__", type: "application/json", 
                                    // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>
                                    dangerouslySetInnerHTML: { __html: bootstrap } })] })] })] }));
    })
        .route('/api', apiRoutes({
        appFid,
        appMnemonic,
        hub,
        routes,
        secret,
    }));
    if (serveStatic)
        app.get('/*', serveStatic({
            manifest: '',
            rewriteRequestPath(path) {
                return path.replace(basePath, uiDistDir);
            },
            root,
            ...serveStaticOptions,
        }));
    return app;
}
//# sourceMappingURL=devtools.js.map