import { Hono } from 'hono';
import type { InferResponseType, hc } from 'hono/client';
import type { inspectRoutes } from 'hono/dev';
import type { Hub } from '../types/hub.js';
export type ApiRoutesOptions = {
    /** Custom app fid to auth with. */
    appFid?: number | undefined;
    /** Custom app mnemonic to auth with. */
    appMnemonic?: string | undefined;
};
export type RouteData = ReturnType<typeof inspectRoutes>[number];
export type User = {
    displayName?: string | undefined;
    pfp?: string | undefined;
    state: 'completed';
    token: string;
    userFid: number;
    username?: string | undefined;
};
export declare function apiRoutes(options: ApiRoutesOptions & {
    hub: Hub | undefined;
    routes: RouteData[];
    secret: string | undefined;
}): Hono<{
    Variables: {
        fid: number | undefined;
        keypair: {
            publicKey: string;
            privateKey: string;
        } | undefined;
    };
}, {
    "/frames": {
        $get: {
            input: {};
            output: string[];
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        };
    };
} & {
    "/frames/:url": {
        $get: {
            input: {
                param: {
                    url: string;
                };
            };
            output: {
                readonly id: string;
                readonly timestamp: number;
                readonly type: "initial";
                readonly method: "get";
                readonly context: {
                    buttonIndex?: 1 | 2 | 3 | 4 | undefined;
                    buttonValue?: string | undefined;
                    env: {
                        [x: string]: never;
                    } | undefined;
                    frameData?: {
                        address?: string | undefined;
                        buttonIndex?: 1 | 2 | 3 | 4 | undefined;
                        castId: {
                            fid: number;
                            hash: string;
                        };
                        fid: number;
                        inputText?: string | undefined;
                        messageHash: string;
                        network: number;
                        state?: string | undefined;
                        timestamp: number;
                        transactionId?: `0x${string}` | undefined;
                        url: string;
                    } | undefined;
                    initialPath: string;
                    inputText?: string | undefined;
                    previousButtonValues?: string[] | undefined;
                    previousState: never;
                    req: {
                        raw: {
                            readonly cache: RequestCache;
                            readonly credentials: RequestCredentials;
                            readonly destination: RequestDestination;
                            readonly headers: Record<string, string>;
                            readonly integrity: string;
                            readonly keepalive: boolean;
                            readonly method: string;
                            readonly mode: RequestMode;
                            readonly redirect: RequestRedirect;
                            readonly referrer: string;
                            readonly referrerPolicy: ReferrerPolicy;
                            readonly signal: {
                                readonly aborted: boolean;
                                onabort: {} | null;
                                readonly reason: any;
                                throwIfAborted: {};
                                addEventListener: {};
                                removeEventListener: {};
                                dispatchEvent: {};
                            };
                            readonly url: string;
                            clone: {};
                            readonly body: {
                                readonly locked: boolean;
                                cancel: {};
                                getReader: {};
                                pipeThrough: {};
                                pipeTo: {};
                                tee: {};
                                prototype: {
                                    readonly locked: boolean;
                                    cancel: {};
                                    getReader: {};
                                    pipeThrough: {};
                                    pipeTo: {};
                                    tee: {};
                                    prototype: any;
                                };
                            } | null;
                            readonly bodyUsed: boolean;
                            arrayBuffer: {};
                            blob: {};
                            formData: {};
                            json: {};
                            text: {};
                        };
                        routeIndex: number;
                        path: string;
                        bodyCache: {
                            json?: any;
                            text?: string | undefined;
                            arrayBuffer?: {
                                readonly byteLength: number;
                                slice: {};
                                resize: {};
                                readonly [Symbol.toStringTag]: string;
                            } | undefined;
                            blob?: {
                                readonly size: number;
                                readonly type: string;
                                arrayBuffer: {};
                                slice: {};
                                stream: {};
                                text: {};
                                json: {};
                                formData: {};
                            } | undefined;
                            formData?: {
                                append: {};
                                delete: {};
                                get: {};
                                getAll: {};
                                has: {};
                                set: {};
                                forEach: {};
                            } | undefined;
                            parsedBody?: {
                                [x: string]: string | {
                                    readonly lastModified: number;
                                    readonly name: string;
                                    readonly webkitRelativePath: string;
                                    readonly size: number;
                                    readonly type: string;
                                    arrayBuffer: {};
                                    slice: {};
                                    stream: {};
                                    text: {};
                                    json: {};
                                    formData: {};
                                };
                            } | undefined;
                        };
                        param: {};
                        query: {};
                        queries: {};
                        header: {};
                        parseBody: {};
                        json: {};
                        text: {};
                        arrayBuffer: {};
                        blob: {};
                        formData: {};
                        addValidatedData: {};
                        valid: {};
                        readonly url: string;
                        readonly method: string;
                        readonly matchedRoutes: {
                            path: string;
                            method: string;
                            handler: {} | {};
                        }[];
                        readonly routePath: string;
                    };
                    status: "initial" | "redirect" | "response";
                    var: {
                        readonly [x: string]: never;
                    };
                    verified: boolean;
                    url: string;
                    cycle: "image" | "main";
                    deriveState: {};
                    error: {};
                    res: {};
                    transactionId?: `0x${string}` | undefined;
                } | undefined;
                readonly frame: {
                    buttons: ({
                        index: 1 | 2 | 3 | 4;
                        title: string;
                        type: "link";
                        postUrl: undefined;
                        target: `http://${string}` | `https://${string}`;
                    } | {
                        index: 1 | 2 | 3 | 4;
                        title: string;
                        type: "mint";
                        postUrl: undefined;
                        target: `eip155:${string}`;
                    } | {
                        index: 1 | 2 | 3 | 4;
                        title: string;
                        type: "post" | "post_redirect";
                        postUrl: string | undefined;
                        target: `http://${string}` | `https://${string}` | undefined;
                    } | {
                        index: 1 | 2 | 3 | 4;
                        title: string;
                        type: "tx";
                        postUrl: string | undefined;
                        target: string;
                    })[];
                    image: string;
                    imageAspectRatio: import("../types/frame.js").FrameImageAspectRatio;
                    imageUrl: string;
                    input: {
                        text: string;
                    } | undefined;
                    postUrl: string | undefined;
                    state: string;
                    title: string;
                    version: "vNext";
                    debug: {
                        htmlTags: string[];
                    };
                };
                readonly metrics: {
                    readonly htmlSize: number;
                    readonly imageSize: number;
                    readonly speed: number;
                };
                readonly response: {
                    readonly success: true;
                    readonly error: undefined;
                    readonly status: number;
                    readonly statusText: string;
                };
                readonly url: string;
            };
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        };
    };
} & {
    "/frames/:url/action": {
        $post: {
            input: {
                json: {
                    buttonIndex: number;
                    transactionId: string | undefined;
                    fid: number;
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                    castId?: {
                        hash: string;
                        fid: number;
                    } | undefined;
                };
            } & {
                param: {
                    url: string;
                };
            };
            output: {
                readonly id: string;
                readonly timestamp: number;
                readonly type: "error";
                readonly method: "post";
                readonly body: {
                    fid: number;
                    buttonIndex: number;
                    transactionId: string | undefined;
                    castId: {
                        hash: string;
                        fid: number;
                    };
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                };
                readonly metrics: {
                    readonly speed: number;
                };
                readonly response: {
                    readonly success: false;
                    readonly error: string;
                    readonly status: number;
                    readonly statusText: string;
                };
                readonly url: string;
            };
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        } | {
            input: {
                json: {
                    buttonIndex: number;
                    transactionId: string | undefined;
                    fid: number;
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                    castId?: {
                        hash: string;
                        fid: number;
                    } | undefined;
                };
            } & {
                param: {
                    url: string;
                };
            };
            output: {
                readonly id: string;
                readonly timestamp: number;
                readonly type: "action";
                readonly method: "post";
                readonly body: {
                    fid: number;
                    buttonIndex: number;
                    transactionId: string | undefined;
                    castId: {
                        hash: string;
                        fid: number;
                    };
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                };
                readonly context: {
                    buttonIndex?: 1 | 2 | 3 | 4 | undefined;
                    buttonValue?: string | undefined;
                    env: {
                        [x: string]: never;
                    } | undefined;
                    frameData?: {
                        address?: string | undefined;
                        buttonIndex?: 1 | 2 | 3 | 4 | undefined;
                        castId: {
                            fid: number;
                            hash: string;
                        };
                        fid: number;
                        inputText?: string | undefined;
                        messageHash: string;
                        network: number;
                        state?: string | undefined;
                        timestamp: number;
                        transactionId?: `0x${string}` | undefined;
                        url: string;
                    } | undefined;
                    initialPath: string;
                    inputText?: string | undefined;
                    previousButtonValues?: string[] | undefined;
                    previousState: never;
                    req: {
                        raw: {
                            readonly cache: RequestCache;
                            readonly credentials: RequestCredentials;
                            readonly destination: RequestDestination;
                            readonly headers: Record<string, string>;
                            readonly integrity: string;
                            readonly keepalive: boolean;
                            readonly method: string;
                            readonly mode: RequestMode;
                            readonly redirect: RequestRedirect;
                            readonly referrer: string;
                            readonly referrerPolicy: ReferrerPolicy;
                            readonly signal: {
                                readonly aborted: boolean;
                                onabort: {} | null;
                                readonly reason: any;
                                throwIfAborted: {};
                                addEventListener: {};
                                removeEventListener: {};
                                dispatchEvent: {};
                            };
                            readonly url: string;
                            clone: {};
                            readonly body: {
                                readonly locked: boolean;
                                cancel: {};
                                getReader: {};
                                pipeThrough: {};
                                pipeTo: {};
                                tee: {};
                                prototype: {
                                    readonly locked: boolean;
                                    cancel: {};
                                    getReader: {};
                                    pipeThrough: {};
                                    pipeTo: {};
                                    tee: {};
                                    prototype: any;
                                };
                            } | null;
                            readonly bodyUsed: boolean;
                            arrayBuffer: {};
                            blob: {};
                            formData: {};
                            json: {};
                            text: {};
                        };
                        routeIndex: number;
                        path: string;
                        bodyCache: {
                            json?: any;
                            text?: string | undefined;
                            arrayBuffer?: {
                                readonly byteLength: number;
                                slice: {};
                                resize: {};
                                readonly [Symbol.toStringTag]: string;
                            } | undefined;
                            blob?: {
                                readonly size: number;
                                readonly type: string;
                                arrayBuffer: {};
                                slice: {};
                                stream: {};
                                text: {};
                                json: {};
                                formData: {};
                            } | undefined;
                            formData?: {
                                append: {};
                                delete: {};
                                get: {};
                                getAll: {};
                                has: {};
                                set: {};
                                forEach: {};
                            } | undefined;
                            parsedBody?: {
                                [x: string]: string | {
                                    readonly lastModified: number;
                                    readonly name: string;
                                    readonly webkitRelativePath: string;
                                    readonly size: number;
                                    readonly type: string;
                                    arrayBuffer: {};
                                    slice: {};
                                    stream: {};
                                    text: {};
                                    json: {};
                                    formData: {};
                                };
                            } | undefined;
                        };
                        param: {};
                        query: {};
                        queries: {};
                        header: {};
                        parseBody: {};
                        json: {};
                        text: {};
                        arrayBuffer: {};
                        blob: {};
                        formData: {};
                        addValidatedData: {};
                        valid: {};
                        readonly url: string;
                        readonly method: string;
                        readonly matchedRoutes: {
                            path: string;
                            method: string;
                            handler: {} | {};
                        }[];
                        readonly routePath: string;
                    };
                    status: "initial" | "redirect" | "response";
                    var: {
                        readonly [x: string]: never;
                    };
                    verified: boolean;
                    url: string;
                    cycle: "image" | "main";
                    deriveState: {};
                    error: {};
                    res: {};
                    transactionId?: `0x${string}` | undefined;
                } | undefined;
                readonly frame: {
                    buttons: ({
                        index: 1 | 2 | 3 | 4;
                        title: string;
                        type: "link";
                        postUrl: undefined;
                        target: `http://${string}` | `https://${string}`;
                    } | {
                        index: 1 | 2 | 3 | 4;
                        title: string;
                        type: "mint";
                        postUrl: undefined;
                        target: `eip155:${string}`;
                    } | {
                        index: 1 | 2 | 3 | 4;
                        title: string;
                        type: "post" | "post_redirect";
                        postUrl: string | undefined;
                        target: `http://${string}` | `https://${string}` | undefined;
                    } | {
                        index: 1 | 2 | 3 | 4;
                        title: string;
                        type: "tx";
                        postUrl: string | undefined;
                        target: string;
                    })[];
                    image: string;
                    imageAspectRatio: import("../types/frame.js").FrameImageAspectRatio;
                    imageUrl: string;
                    input: {
                        text: string;
                    } | undefined;
                    postUrl: string | undefined;
                    state: string;
                    title: string;
                    version: "vNext";
                    debug: {
                        htmlTags: string[];
                    };
                };
                readonly metrics: {
                    readonly htmlSize: number;
                    readonly imageSize: number;
                    readonly speed: number;
                };
                readonly response: {
                    readonly success: true;
                    readonly error: undefined;
                    readonly status: number;
                    readonly statusText: string;
                };
                readonly url: string;
            };
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        };
    };
} & {
    "/frames/:url/redirect": {
        $post: {
            input: {
                json: {
                    buttonIndex: number;
                    transactionId: string | undefined;
                    fid: number;
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                    castId?: {
                        hash: string;
                        fid: number;
                    } | undefined;
                };
            } & {
                param: {
                    url: string;
                };
            };
            output: {
                readonly id: string;
                readonly timestamp: number;
                readonly type: "redirect";
                readonly method: "post";
                readonly body: {
                    fid: number;
                    buttonIndex: number;
                    transactionId: string | undefined;
                    castId: {
                        hash: string;
                        fid: number;
                    };
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                };
                readonly metrics: {
                    readonly speed: number;
                };
                readonly response: {
                    success: boolean;
                    location: string;
                    error: undefined;
                    status: number;
                    statusText: string;
                } | {
                    success: boolean;
                    error: string | undefined;
                    status: number;
                    statusText: string;
                    location?: undefined;
                };
                readonly sourceFrameId: string;
                readonly url: string;
            };
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        };
    };
} & {
    "/frames/:url/tx": {
        $post: {
            input: {
                json: {
                    buttonIndex: number;
                    transactionId: string | undefined;
                    fid: number;
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                    castId?: {
                        hash: string;
                        fid: number;
                    } | undefined;
                };
            } & {
                param: {
                    url: string;
                };
            };
            output: {
                readonly id: string;
                readonly timestamp: number;
                readonly type: "error";
                readonly method: "post";
                readonly body: {
                    fid: number;
                    buttonIndex: number;
                    transactionId: string | undefined;
                    castId: {
                        hash: string;
                        fid: number;
                    };
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                };
                readonly metrics: {
                    readonly speed: number;
                };
                readonly response: {
                    readonly success: false;
                    readonly error: string;
                    readonly status: number;
                    readonly statusText: string;
                };
                readonly url: string;
            };
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        } | {
            input: {
                json: {
                    buttonIndex: number;
                    transactionId: string | undefined;
                    fid: number;
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                    castId?: {
                        hash: string;
                        fid: number;
                    } | undefined;
                };
            } & {
                param: {
                    url: string;
                };
            };
            output: {
                readonly id: string;
                readonly timestamp: number;
                readonly type: "tx";
                readonly method: "post";
                readonly body: {
                    fid: number;
                    buttonIndex: number;
                    transactionId: string | undefined;
                    castId: {
                        hash: string;
                        fid: number;
                    };
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                };
                readonly metrics: {
                    readonly speed: number;
                };
                readonly response: {
                    readonly success: true;
                    readonly data: {
                        chainId: "eip155:1" | "eip155:100" | "eip155:10" | "eip155:8453" | "eip155:42161" | "eip155:42170" | "eip155:84532" | "eip155:421614" | "eip155:7777777" | "eip155:11155111" | "eip155:11155420" | "eip155:666666666";
                        attribution?: boolean | undefined;
                        method: "eth_sendTransaction";
                        params: {
                            abi?: readonly ({
                                type: "constructor";
                                inputs: readonly ({
                                    type: string;
                                    name?: string | undefined;
                                    internalType?: string | undefined;
                                } | {
                                    type: "tuple" | `tuple[${string}]`;
                                    name?: string | undefined;
                                    internalType?: string | undefined;
                                    components: readonly ({
                                        type: string;
                                        name?: string | undefined;
                                        internalType?: string | undefined;
                                    } | any)[];
                                })[];
                                payable?: boolean | undefined;
                                stateMutability: "nonpayable" | "payable";
                            } | {
                                type: "error";
                                inputs: readonly ({
                                    type: string;
                                    name?: string | undefined;
                                    internalType?: string | undefined;
                                } | {
                                    type: "tuple" | `tuple[${string}]`;
                                    name?: string | undefined;
                                    internalType?: string | undefined;
                                    components: readonly ({
                                        type: string;
                                        name?: string | undefined;
                                        internalType?: string | undefined;
                                    } | any)[];
                                })[];
                                name: string;
                            } | {
                                type: "event";
                                anonymous?: boolean | undefined;
                                inputs: readonly ({
                                    type: string;
                                    name?: string | undefined;
                                    internalType?: string | undefined;
                                    indexed?: boolean | undefined;
                                } | {
                                    type: "tuple" | `tuple[${string}]`;
                                    name?: string | undefined;
                                    internalType?: string | undefined;
                                    components: readonly ({
                                        type: string;
                                        name?: string | undefined;
                                        internalType?: string | undefined;
                                    } | {
                                        type: "tuple" | `tuple[${string}]`;
                                        name?: string | undefined;
                                        internalType?: string | undefined;
                                        components: readonly ({
                                            type: string;
                                            name?: string | undefined;
                                            internalType?: string | undefined;
                                        } | any)[];
                                    })[];
                                    indexed?: boolean | undefined;
                                })[];
                                name: string;
                            } | {
                                type: "fallback";
                                inputs?: readonly [] | undefined;
                                payable?: boolean | undefined;
                                stateMutability: "nonpayable" | "payable";
                            } | {
                                type: "function";
                                constant?: boolean | undefined;
                                gas?: number | undefined;
                                inputs: readonly ({
                                    type: string;
                                    name?: string | undefined;
                                    internalType?: string | undefined;
                                } | {
                                    type: "tuple" | `tuple[${string}]`;
                                    name?: string | undefined;
                                    internalType?: string | undefined;
                                    components: readonly ({
                                        type: string;
                                        name?: string | undefined;
                                        internalType?: string | undefined;
                                    } | any)[];
                                })[];
                                name: string;
                                outputs: readonly ({
                                    type: string;
                                    name?: string | undefined;
                                    internalType?: string | undefined;
                                } | {
                                    type: "tuple" | `tuple[${string}]`;
                                    name?: string | undefined;
                                    internalType?: string | undefined;
                                    components: readonly ({
                                        type: string;
                                        name?: string | undefined;
                                        internalType?: string | undefined;
                                    } | any)[];
                                })[];
                                payable?: boolean | undefined;
                                stateMutability: import("viem").AbiStateMutability;
                            } | {
                                type: "receive";
                                stateMutability: "payable";
                            })[] | undefined;
                            attribution?: boolean | undefined;
                            data?: `0x${string}` | undefined;
                            gas?: string | undefined;
                            to: `0x${string}`;
                            value?: string | undefined;
                        };
                    };
                    readonly error: undefined;
                    readonly status: number;
                    readonly statusText: string;
                };
                readonly sourceFrameId: string;
                readonly url: string;
            };
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        };
    };
} & {
    "/auth/code": {
        $get: {
            input: {};
            output: {
                token: string;
                url: string;
            };
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        };
    };
} & {
    "/auth/status/:token": {
        $get: {
            input: {
                param: {
                    token: string;
                };
            };
            output: {
                displayName?: string | undefined;
                pfp?: string | undefined;
                state: "completed";
                token: string;
                userFid: number;
                username?: string | undefined;
            };
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        } | {
            input: {
                param: {
                    token: string;
                };
            };
            output: {
                state: "pending" | "approved";
            };
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        };
    };
} & {
    "/auth/logout": {
        $post: {
            input: {};
            output: {
                success: boolean;
            };
            outputFormat: "json";
            status: import("hono/utils/http-status").StatusCode;
        };
    };
} & {
    "/debug/image/:url": {
        $post: {
            input: {
                json: {
                    buttonIndex: number;
                    transactionId: string | undefined;
                    fid: number;
                    inputText: string | undefined;
                    state: string | undefined;
                    fromAddress: string | undefined;
                    sourceFrameId: string;
                    castId?: {
                        hash: string;
                        fid: number;
                    } | undefined;
                } | {};
            } & {
                param: {
                    url: string;
                };
            };
            output: {};
            outputFormat: string;
            status: import("hono/utils/http-status").StatusCode;
        };
    };
}, "/">;
export type ApiRoutes = ReturnType<typeof apiRoutes>;
type Client = ReturnType<typeof hc<ApiRoutes>>;
export type Data = InferResponseType<Client['frames'][':url']['$get']> | Extract<InferResponseType<Client['frames'][':url']['action']['$post']>, {
    type: 'action';
}> | (InferResponseType<Client['frames'][':url']['redirect']['$post']> & BaseData) | (Extract<InferResponseType<Client['frames'][':url']['tx']['$post']>, {
    type: 'tx';
}> & BaseData);
type BaseData = Pick<InferResponseType<Client['frames'][':url']['$get']>, 'context' | 'frame'>;
export type Bootstrap = {
    data: Data | undefined;
    frameUrls: string[];
    user: User | undefined;
};
export declare function getFrameUrls(origin: string, routes: RouteData[]): string[];
export declare function getInitialData(frameUrl: string): Promise<{
    readonly id: string;
    readonly timestamp: number;
    readonly type: "initial";
    readonly method: "get";
    readonly context: import("../index.js").FrameContext | undefined;
    readonly frame: {
        buttons: import("./types.js").FrameButton[];
        image: string;
        imageAspectRatio: import("../types/frame.js").FrameImageAspectRatio;
        imageUrl: string;
        input: {
            text: string;
        } | undefined;
        postUrl: string | undefined;
        state: string;
        title: string;
        version: "vNext";
        debug: {
            htmlTags: string[];
        };
    };
    readonly metrics: {
        readonly htmlSize: number;
        readonly imageSize: number;
        readonly speed: number;
    };
    readonly response: {
        readonly success: true;
        readonly error: undefined;
        readonly status: number;
        readonly statusText: string;
    };
    readonly url: string;
}>;
export {};
//# sourceMappingURL=api.d.ts.map