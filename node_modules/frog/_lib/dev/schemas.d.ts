export declare const postSchema: import("valibot").ObjectSchema<{
    readonly buttonIndex: import("valibot").SchemaWithPipe<[import("valibot").NumberSchema<undefined>, import("valibot").IntegerAction<number, undefined>, import("valibot").MinValueAction<number, 1, undefined>, import("valibot").MaxValueAction<number, 4, undefined>]>;
    readonly castId: import("valibot").OptionalSchema<import("valibot").ObjectSchema<{
        readonly fid: import("valibot").SchemaWithPipe<[import("valibot").NumberSchema<undefined>, import("valibot").IntegerAction<number, undefined>, import("valibot").MinValueAction<number, 1, undefined>]>;
        readonly hash: import("valibot").StringSchema<undefined>;
    }, undefined>, {
        fid: number;
        hash: string;
    }>;
    readonly fid: import("valibot").SchemaWithPipe<[import("valibot").NumberSchema<undefined>, import("valibot").IntegerAction<number, undefined>, import("valibot").MinValueAction<number, 1, undefined>]>;
    readonly fromAddress: import("valibot").UnionSchema<[import("valibot").UndefinedSchema<undefined>, import("valibot").StringSchema<undefined>], undefined>;
    readonly inputText: import("valibot").UnionSchema<[import("valibot").UndefinedSchema<undefined>, import("valibot").StringSchema<undefined>], undefined>;
    readonly state: import("valibot").UnionSchema<[import("valibot").UndefinedSchema<undefined>, import("valibot").StringSchema<undefined>], undefined>;
    readonly transactionId: import("valibot").UnionSchema<[import("valibot").UndefinedSchema<undefined>, import("valibot").StringSchema<undefined>], undefined>;
    readonly sourceFrameId: import("valibot").StringSchema<undefined>;
}, undefined>;
//# sourceMappingURL=schemas.d.ts.map