import { mnemonicToAccount } from 'viem/accounts';
export async function getSignedKeyRequest(data) {
    const { appFid, appMnemonic, publicKey } = data;
    if (appFid && appMnemonic) {
        const account = mnemonicToAccount(appMnemonic);
        const deadline = Math.floor(Date.now() / 1000) + 60 * 60; // now + hour
        const requestFid = appFid;
        const signature = await account.signTypedData({
            domain: {
                name: 'Farcaster SignedKeyRequestValidator',
                version: '1',
                chainId: 10,
                verifyingContract: '0x00000000FC700472606ED4fA22623Acf62c60553',
            },
            types: {
                SignedKeyRequest: [
                    { name: 'requestFid', type: 'uint256' },
                    { name: 'key', type: 'bytes' },
                    { name: 'deadline', type: 'uint256' },
                ],
            },
            primaryType: 'SignedKeyRequest',
            message: {
                requestFid: BigInt(appFid),
                key: publicKey,
                deadline: BigInt(deadline),
            },
        });
        return { deadline, requestFid, signature };
    }
    return (await fetch(`https://auth.frog.fm/api/signed-key-requests/${publicKey}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
    }).then((response) => response.json()));
}
export async function postSignedKeyRequest(body) {
    return (await fetch('https://api.warpcast.com/v2/signed-key-requests', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            ...body,
            key: body.publicKey,
        }),
    }).then((response) => response.json()));
}
export async function getSignedKeyRequestForToken(token) {
    return (await fetch(`https://api.warpcast.com/v2/signed-key-request?token=${token}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
    }).then((response) => response.json()));
}
export async function getUserDataByFid(hub, userFid) {
    const response = (await fetch(`${hub.apiUrl}/v1/userDataByFid?fid=${userFid}`, {
        ...hub.fetchOptions,
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
            ...hub.fetchOptions?.headers,
        },
    }).then((response) => response.json()));
    let displayName = undefined;
    let pfp = undefined;
    let username = undefined;
    for (const message of response.messages) {
        if (message.data.type !== 'MESSAGE_TYPE_USER_DATA_ADD')
            continue;
        const type = message.data.userDataBody.type;
        const value = message.data.userDataBody.value;
        if (type === 'USER_DATA_TYPE_PFP')
            pfp = value;
        if (type === 'USER_DATA_TYPE_USERNAME')
            username = value;
        if (type === 'USER_DATA_TYPE_DISPLAY')
            displayName = value;
    }
    return { displayName, pfp, userFid, username };
}
//# sourceMappingURL=warpcast.js.map