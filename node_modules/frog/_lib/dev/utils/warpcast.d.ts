import type { Hub } from '../../types/hub.js';
export declare function getSignedKeyRequest(data: {
    appFid: number | undefined;
    appMnemonic: string | undefined;
    publicKey: `0x${string}`;
}): Promise<{
    deadline: number;
    requestFid: number;
    signature: string;
}>;
export declare function postSignedKeyRequest(body: {
    deadline: number;
    publicKey: string;
    requestFid: number;
    signature: string;
}): Promise<SignedKeyRequestResponse>;
export declare function getSignedKeyRequestForToken(token: string): Promise<SignedKeyRequestResponse>;
type SignedKeyRequestResponse = {
    result: {
        signedKeyRequest: SignedKeyRequest;
    };
};
type SignedKeyRequest = {
    token: string;
    deeplinkUrl: string;
    key: string;
    requestFid: number;
    isSponsored: boolean;
} & ({
    state: 'pending';
    signerUser: {
        fid: number;
        username: string;
        displayName: string;
        pfp: {
            url: string;
            verified: false;
        };
        profile: {
            bio: {
                text: string;
                mentions: string[];
                channelMentions: string[];
            };
            location: {
                placeId: string;
                description: string;
            };
        };
        followerCount: number;
        followingCount: number;
        activeOnFcNetwork: boolean;
        viewerContext: {
            following: boolean;
            followedBy: boolean;
        };
    };
    signerUserMetadata: {
        createdAt: number;
        usersCount: number;
        viewerContext: {
            existingKeysCountForViewer: number;
        };
    };
    userFid: undefined;
} | {
    state: 'approved' | 'completed';
    signerUser: undefined;
    signerUserMetadata: undefined;
    userFid: number;
});
export declare function getUserDataByFid(hub: Hub, userFid: number): Promise<{
    displayName: string | undefined;
    pfp: string | undefined;
    userFid: number;
    username: string | undefined;
}>;
export {};
//# sourceMappingURL=warpcast.d.ts.map