import { parseFromString } from 'dom-parser';
import { deserializeJson } from '../../utils/deserializeJson.js';
import { metaTagPropertyRegex, } from '../../utils/getFrameMetadata.js';
import { parseButtons } from './parseButtons.js';
export function htmlToMetadata(html) {
    const dom = parseFromString(html
        .replace(/<!doctype html>/i, '')
        // @TODO: consider using `lodash.unescape`
        .replaceAll(/&amp;/gm, '&')
        .replaceAll(/&lt;/gm, '<')
        .replaceAll(/&gt;/gm, '>')
        .replaceAll(/&quot;/gm, '"')
        .replaceAll(/&#39;/gm, "'")
        .replaceAll(/&#96;/gm, '`'));
    const nodes = dom.getElementsByTagName('meta');
    const metadata = [];
    const htmlTags = [];
    const properties = {};
    for (const node of nodes) {
        const property = (node.getAttribute('property') ??
            node.getAttribute('name'));
        const content = node.getAttribute('content');
        if (!property)
            continue;
        if (!property.match(metaTagPropertyRegex))
            continue;
        metadata.push({ property, content });
        properties[property] = content;
        // filter these properties out and add back on the client to save url space
        // tip: search for `_frog_${property}` to see where it's added back
        const excludeProperties = [
            'fc:frame:image',
            'fc:frame:post_url',
            'fc:frame:state',
            'og:image',
        ];
        let text = node.outerHTML;
        if (excludeProperties.includes(property ?? ''))
            text = text.replace(/content=".*?"/, `content="_frog_${property}"`);
        htmlTags.push(text);
    }
    const buttons = parseButtons(metadata);
    return {
        context: properties['frog:context']
            ? deserializeJson(properties['frog:context'])
            : undefined,
        frame: {
            buttons,
            image: properties['og:image'],
            imageAspectRatio: properties['fc:frame:image:aspect_ratio'] ??
                '1.91:1',
            imageUrl: properties['fc:frame:image'],
            input: properties['fc:frame:input:text']
                ? { text: properties['fc:frame:input:text'] }
                : undefined,
            postUrl: properties['fc:frame:post_url'],
            state: properties['fc:frame:state'],
            title: properties['og:title'],
            version: properties['fc:frame'] ?? 'vNext',
            debug: {
                htmlTags,
            },
        },
        properties: metadata,
    };
}
//# sourceMappingURL=htmlToMetadata.js.map